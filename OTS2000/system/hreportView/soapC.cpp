/* soapC.cpp
   Generated by gSOAP 2.7.6c from hreport.h
   Copyright (C) 2000-2005, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.7.6c 2009-07-08 09:04:39 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->header)
	{	soap->part = SOAP_IN_HEADER;
		soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL);
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", NULL, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (!soap->fault)
	{	soap->fault = (struct SOAP_ENV__Fault*)soap_malloc(soap, sizeof(struct SOAP_ENV__Fault));
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = (struct SOAP_ENV__Code*)soap_malloc(soap, sizeof(struct SOAP_ENV__Code));
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = (struct SOAP_ENV__Reason*)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason));
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (!soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = (struct SOAP_ENV__Code*)soap_malloc(soap, sizeof(struct SOAP_ENV__Code));
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 1)
	{	if (!soap->fault->detail)
		{	soap->fault->detail = (struct SOAP_ENV__Detail*)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));
			soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
		}
		return (const char**)&soap->fault->detail->__any;
	}
	if (!soap->fault->SOAP_ENV__Detail)
	{	soap->fault->SOAP_ENV__Detail = (struct SOAP_ENV__Detail*)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));
		soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
	}
	return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	for (;;)
		if (!soap_getelement(soap, &t))
			if (soap->error || soap_ignore_element(soap))
				break;
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{
	if (soap_peek_element(soap))
		return NULL;
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE__ns1__GetTemplateInformationResponse:
		return soap_in__ns1__GetTemplateInformationResponse(soap, NULL, NULL, "ns1:GetTemplateInformationResponse");
	case SOAP_TYPE__ns1__GetTemplateInformation:
		return soap_in__ns1__GetTemplateInformation(soap, NULL, NULL, "ns1:GetTemplateInformation");
	case SOAP_TYPE__ns1__GetTemplateTreeResponse:
		return soap_in__ns1__GetTemplateTreeResponse(soap, NULL, NULL, "ns1:GetTemplateTreeResponse");
	case SOAP_TYPE__ns1__GetTemplateTree:
		return soap_in__ns1__GetTemplateTree(soap, NULL, NULL, "ns1:GetTemplateTree");
	case SOAP_TYPE__ns1__QueryResponse:
		return soap_in__ns1__QueryResponse(soap, NULL, NULL, "ns1:QueryResponse");
	case SOAP_TYPE__ns1__Query:
		return soap_in__ns1__Query(soap, NULL, NULL, "ns1:Query");
	case SOAP_TYPE__ns1__GetTemplateConfigResponse:
		return soap_in__ns1__GetTemplateConfigResponse(soap, NULL, NULL, "ns1:GetTemplateConfigResponse");
	case SOAP_TYPE__ns1__GetTemplateConfig:
		return soap_in__ns1__GetTemplateConfig(soap, NULL, NULL, "ns1:GetTemplateConfig");
	case SOAP_TYPE__ns1__GetTemplateResponse:
		return soap_in__ns1__GetTemplateResponse(soap, NULL, NULL, "ns1:GetTemplateResponse");
	case SOAP_TYPE__ns1__GetTemplate:
		return soap_in__ns1__GetTemplate(soap, NULL, NULL, "ns1:GetTemplate");
	case SOAP_TYPE_SOAP_ENV__Reason:
		return soap_in_SOAP_ENV__Reason(soap, NULL, NULL, "SOAP-ENV:Reason");
	case SOAP_TYPE_struct_5:
		return soap_in_struct_5(soap, NULL, NULL, "struct-5");
	case SOAP_TYPE_struct_4:
		return soap_in_struct_4(soap, NULL, NULL, "struct-4");
	case SOAP_TYPE_struct_3:
		return soap_in_struct_3(soap, NULL, NULL, "struct-3");
	case SOAP_TYPE_struct_2:
		return soap_in_struct_2(soap, NULL, NULL, "struct-2");
	case SOAP_TYPE_struct_1:
		return soap_in_struct_1(soap, NULL, NULL, "struct-1");
	case SOAP_TYPE_PointerToSOAP_ENV__Reason:
		return soap_in_PointerToSOAP_ENV__Reason(soap, NULL, NULL, "SOAP-ENV:Reason");
	case SOAP_TYPE_PointerTo_ns1__GetTemplateInformationResponse:
		return soap_in_PointerTo_ns1__GetTemplateInformationResponse(soap, NULL, NULL, "ns1:GetTemplateInformationResponse");
	case SOAP_TYPE_PointerTo_ns1__GetTemplateInformation:
		return soap_in_PointerTo_ns1__GetTemplateInformation(soap, NULL, NULL, "ns1:GetTemplateInformation");
	case SOAP_TYPE_PointerTo_ns1__GetTemplateTreeResponse:
		return soap_in_PointerTo_ns1__GetTemplateTreeResponse(soap, NULL, NULL, "ns1:GetTemplateTreeResponse");
	case SOAP_TYPE_PointerTo_ns1__GetTemplateTree:
		return soap_in_PointerTo_ns1__GetTemplateTree(soap, NULL, NULL, "ns1:GetTemplateTree");
	case SOAP_TYPE_PointerTo_ns1__QueryResponse:
		return soap_in_PointerTo_ns1__QueryResponse(soap, NULL, NULL, "ns1:QueryResponse");
	case SOAP_TYPE_PointerTo_ns1__Query:
		return soap_in_PointerTo_ns1__Query(soap, NULL, NULL, "ns1:Query");
	case SOAP_TYPE_PointerTo_ns1__GetTemplateConfigResponse:
		return soap_in_PointerTo_ns1__GetTemplateConfigResponse(soap, NULL, NULL, "ns1:GetTemplateConfigResponse");
	case SOAP_TYPE_PointerTo_ns1__GetTemplateConfig:
		return soap_in_PointerTo_ns1__GetTemplateConfig(soap, NULL, NULL, "ns1:GetTemplateConfig");
	case SOAP_TYPE_PointerTo_ns1__GetTemplateResponse:
		return soap_in_PointerTo_ns1__GetTemplateResponse(soap, NULL, NULL, "ns1:GetTemplateResponse");
	case SOAP_TYPE_PointerTo_ns1__GetTemplate:
		return soap_in_PointerTo_ns1__GetTemplate(soap, NULL, NULL, "ns1:GetTemplate");
	case SOAP_TYPE_PointerTostruct_5:
		return soap_in_PointerTostruct_5(soap, NULL, NULL, "struct-5");
	case SOAP_TYPE_PointerTostruct_4:
		return soap_in_PointerTostruct_4(soap, NULL, NULL, "struct-4");
	case SOAP_TYPE_PointerTostruct_3:
		return soap_in_PointerTostruct_3(soap, NULL, NULL, "struct-3");
	case SOAP_TYPE_PointerTostruct_2:
		return soap_in_PointerTostruct_2(soap, NULL, NULL, "struct-2");
	case SOAP_TYPE_PointerTostruct_1:
		return soap_in_PointerTostruct_1(soap, NULL, NULL, "struct-1");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetTemplateInformationResponse"))
		{	*type = SOAP_TYPE__ns1__GetTemplateInformationResponse;
			return soap_in__ns1__GetTemplateInformationResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetTemplateInformation"))
		{	*type = SOAP_TYPE__ns1__GetTemplateInformation;
			return soap_in__ns1__GetTemplateInformation(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetTemplateTreeResponse"))
		{	*type = SOAP_TYPE__ns1__GetTemplateTreeResponse;
			return soap_in__ns1__GetTemplateTreeResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetTemplateTree"))
		{	*type = SOAP_TYPE__ns1__GetTemplateTree;
			return soap_in__ns1__GetTemplateTree(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:QueryResponse"))
		{	*type = SOAP_TYPE__ns1__QueryResponse;
			return soap_in__ns1__QueryResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:Query"))
		{	*type = SOAP_TYPE__ns1__Query;
			return soap_in__ns1__Query(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetTemplateConfigResponse"))
		{	*type = SOAP_TYPE__ns1__GetTemplateConfigResponse;
			return soap_in__ns1__GetTemplateConfigResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetTemplateConfig"))
		{	*type = SOAP_TYPE__ns1__GetTemplateConfig;
			return soap_in__ns1__GetTemplateConfig(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetTemplateResponse"))
		{	*type = SOAP_TYPE__ns1__GetTemplateResponse;
			return soap_in__ns1__GetTemplateResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetTemplate"))
		{	*type = SOAP_TYPE__ns1__GetTemplate;
			return soap_in__ns1__GetTemplate(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "SOAP-ENV:Reason"))
		{	*type = SOAP_TYPE_SOAP_ENV__Reason;
			return soap_in_SOAP_ENV__Reason(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "struct-5"))
		{	*type = SOAP_TYPE_struct_5;
			return soap_in_struct_5(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "struct-4"))
		{	*type = SOAP_TYPE_struct_4;
			return soap_in_struct_4(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "struct-3"))
		{	*type = SOAP_TYPE_struct_3;
			return soap_in_struct_3(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "struct-2"))
		{	*type = SOAP_TYPE_struct_2;
			return soap_in_struct_2(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "struct-1"))
		{	*type = SOAP_TYPE_struct_1;
			return soap_in_struct_1(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
	}
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
			return soap->error = SOAP_TAG_MISMATCH;
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unknown element '%s' (level=%u, %d)\n", soap->tag, soap->level, soap->body));
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE__ns1__GetTemplateInformationResponse:
		return ((_ns1__GetTemplateInformationResponse *)ptr)->soap_out(soap, "ns1:GetTemplateInformationResponse", id, NULL);
	case SOAP_TYPE__ns1__GetTemplateInformation:
		return ((_ns1__GetTemplateInformation *)ptr)->soap_out(soap, "ns1:GetTemplateInformation", id, NULL);
	case SOAP_TYPE__ns1__GetTemplateTreeResponse:
		return ((_ns1__GetTemplateTreeResponse *)ptr)->soap_out(soap, "ns1:GetTemplateTreeResponse", id, NULL);
	case SOAP_TYPE__ns1__GetTemplateTree:
		return ((_ns1__GetTemplateTree *)ptr)->soap_out(soap, "ns1:GetTemplateTree", id, NULL);
	case SOAP_TYPE__ns1__QueryResponse:
		return ((_ns1__QueryResponse *)ptr)->soap_out(soap, "ns1:QueryResponse", id, NULL);
	case SOAP_TYPE__ns1__Query:
		return ((_ns1__Query *)ptr)->soap_out(soap, "ns1:Query", id, NULL);
	case SOAP_TYPE__ns1__GetTemplateConfigResponse:
		return ((_ns1__GetTemplateConfigResponse *)ptr)->soap_out(soap, "ns1:GetTemplateConfigResponse", id, NULL);
	case SOAP_TYPE__ns1__GetTemplateConfig:
		return ((_ns1__GetTemplateConfig *)ptr)->soap_out(soap, "ns1:GetTemplateConfig", id, NULL);
	case SOAP_TYPE__ns1__GetTemplateResponse:
		return ((_ns1__GetTemplateResponse *)ptr)->soap_out(soap, "ns1:GetTemplateResponse", id, NULL);
	case SOAP_TYPE__ns1__GetTemplate:
		return ((_ns1__GetTemplate *)ptr)->soap_out(soap, "ns1:GetTemplate", id, NULL);
	case SOAP_TYPE_SOAP_ENV__Reason:
		return soap_out_SOAP_ENV__Reason(soap, tag, id, (const struct SOAP_ENV__Reason *)ptr, "SOAP-ENV:Reason");
	case SOAP_TYPE_struct_5:
		return soap_out_struct_5(soap, tag, id, (const struct struct_5 *)ptr, "struct-5");
	case SOAP_TYPE_struct_4:
		return soap_out_struct_4(soap, tag, id, (const struct struct_4 *)ptr, "struct-4");
	case SOAP_TYPE_struct_3:
		return soap_out_struct_3(soap, tag, id, (const struct struct_3 *)ptr, "struct-3");
	case SOAP_TYPE_struct_2:
		return soap_out_struct_2(soap, tag, id, (const struct struct_2 *)ptr, "struct-2");
	case SOAP_TYPE_struct_1:
		return soap_out_struct_1(soap, tag, id, (const struct struct_1 *)ptr, "struct-1");
	case SOAP_TYPE_PointerToSOAP_ENV__Reason:
		return soap_out_PointerToSOAP_ENV__Reason(soap, tag, id, (struct SOAP_ENV__Reason *const*)ptr, "SOAP-ENV:Reason");
	case SOAP_TYPE_PointerTo_ns1__GetTemplateInformationResponse:
		return soap_out_PointerTo_ns1__GetTemplateInformationResponse(soap, tag, id, (_ns1__GetTemplateInformationResponse *const*)ptr, "ns1:GetTemplateInformationResponse");
	case SOAP_TYPE_PointerTo_ns1__GetTemplateInformation:
		return soap_out_PointerTo_ns1__GetTemplateInformation(soap, tag, id, (_ns1__GetTemplateInformation *const*)ptr, "ns1:GetTemplateInformation");
	case SOAP_TYPE_PointerTo_ns1__GetTemplateTreeResponse:
		return soap_out_PointerTo_ns1__GetTemplateTreeResponse(soap, tag, id, (_ns1__GetTemplateTreeResponse *const*)ptr, "ns1:GetTemplateTreeResponse");
	case SOAP_TYPE_PointerTo_ns1__GetTemplateTree:
		return soap_out_PointerTo_ns1__GetTemplateTree(soap, tag, id, (_ns1__GetTemplateTree *const*)ptr, "ns1:GetTemplateTree");
	case SOAP_TYPE_PointerTo_ns1__QueryResponse:
		return soap_out_PointerTo_ns1__QueryResponse(soap, tag, id, (_ns1__QueryResponse *const*)ptr, "ns1:QueryResponse");
	case SOAP_TYPE_PointerTo_ns1__Query:
		return soap_out_PointerTo_ns1__Query(soap, tag, id, (_ns1__Query *const*)ptr, "ns1:Query");
	case SOAP_TYPE_PointerTo_ns1__GetTemplateConfigResponse:
		return soap_out_PointerTo_ns1__GetTemplateConfigResponse(soap, tag, id, (_ns1__GetTemplateConfigResponse *const*)ptr, "ns1:GetTemplateConfigResponse");
	case SOAP_TYPE_PointerTo_ns1__GetTemplateConfig:
		return soap_out_PointerTo_ns1__GetTemplateConfig(soap, tag, id, (_ns1__GetTemplateConfig *const*)ptr, "ns1:GetTemplateConfig");
	case SOAP_TYPE_PointerTo_ns1__GetTemplateResponse:
		return soap_out_PointerTo_ns1__GetTemplateResponse(soap, tag, id, (_ns1__GetTemplateResponse *const*)ptr, "ns1:GetTemplateResponse");
	case SOAP_TYPE_PointerTo_ns1__GetTemplate:
		return soap_out_PointerTo_ns1__GetTemplate(soap, tag, id, (_ns1__GetTemplate *const*)ptr, "ns1:GetTemplate");
	case SOAP_TYPE_PointerTostruct_5:
		return soap_out_PointerTostruct_5(soap, tag, id, (struct struct_5 *const*)ptr, "struct-5");
	case SOAP_TYPE_PointerTostruct_4:
		return soap_out_PointerTostruct_4(soap, tag, id, (struct struct_4 *const*)ptr, "struct-4");
	case SOAP_TYPE_PointerTostruct_3:
		return soap_out_PointerTostruct_3(soap, tag, id, (struct struct_3 *const*)ptr, "struct-3");
	case SOAP_TYPE_PointerTostruct_2:
		return soap_out_PointerTostruct_2(soap, tag, id, (struct struct_2 *const*)ptr, "struct-2");
	case SOAP_TYPE_PointerTostruct_1:
		return soap_out_PointerTostruct_1(soap, tag, id, (struct struct_1 *const*)ptr, "struct-1");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, "QName", id, (char**)&ptr, NULL);
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char**)&ptr, "xsd:string");
	}
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE__ns1__GetTemplateInformationResponse:
		((_ns1__GetTemplateInformationResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetTemplateInformation:
		((_ns1__GetTemplateInformation *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetTemplateTreeResponse:
		((_ns1__GetTemplateTreeResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetTemplateTree:
		((_ns1__GetTemplateTree *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__QueryResponse:
		((_ns1__QueryResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__Query:
		((_ns1__Query *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetTemplateConfigResponse:
		((_ns1__GetTemplateConfigResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetTemplateConfig:
		((_ns1__GetTemplateConfig *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetTemplateResponse:
		((_ns1__GetTemplateResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetTemplate:
		((_ns1__GetTemplate *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_SOAP_ENV__Reason:
		soap_serialize_SOAP_ENV__Reason(soap, (const struct SOAP_ENV__Reason *)ptr);
		break;
	case SOAP_TYPE___ns1__GetTemplateInformation_:
		soap_serialize___ns1__GetTemplateInformation_(soap, (const struct __ns1__GetTemplateInformation_ *)ptr);
		break;
	case SOAP_TYPE___ns1__GetTemplateTree_:
		soap_serialize___ns1__GetTemplateTree_(soap, (const struct __ns1__GetTemplateTree_ *)ptr);
		break;
	case SOAP_TYPE___ns1__Query_:
		soap_serialize___ns1__Query_(soap, (const struct __ns1__Query_ *)ptr);
		break;
	case SOAP_TYPE___ns1__GetTemplateConfig_:
		soap_serialize___ns1__GetTemplateConfig_(soap, (const struct __ns1__GetTemplateConfig_ *)ptr);
		break;
	case SOAP_TYPE___ns1__GetTemplate_:
		soap_serialize___ns1__GetTemplate_(soap, (const struct __ns1__GetTemplate_ *)ptr);
		break;
	case SOAP_TYPE___ns1__GetTemplateInformation:
		soap_serialize___ns1__GetTemplateInformation(soap, (const struct __ns1__GetTemplateInformation *)ptr);
		break;
	case SOAP_TYPE___ns1__GetTemplateTree:
		soap_serialize___ns1__GetTemplateTree(soap, (const struct __ns1__GetTemplateTree *)ptr);
		break;
	case SOAP_TYPE___ns1__Query:
		soap_serialize___ns1__Query(soap, (const struct __ns1__Query *)ptr);
		break;
	case SOAP_TYPE___ns1__GetTemplateConfig:
		soap_serialize___ns1__GetTemplateConfig(soap, (const struct __ns1__GetTemplateConfig *)ptr);
		break;
	case SOAP_TYPE___ns1__GetTemplate:
		soap_serialize___ns1__GetTemplate(soap, (const struct __ns1__GetTemplate *)ptr);
		break;
	case SOAP_TYPE_struct_5:
		soap_serialize_struct_5(soap, (const struct struct_5 *)ptr);
		break;
	case SOAP_TYPE_struct_4:
		soap_serialize_struct_4(soap, (const struct struct_4 *)ptr);
		break;
	case SOAP_TYPE_struct_3:
		soap_serialize_struct_3(soap, (const struct struct_3 *)ptr);
		break;
	case SOAP_TYPE_struct_2:
		soap_serialize_struct_2(soap, (const struct struct_2 *)ptr);
		break;
	case SOAP_TYPE_struct_1:
		soap_serialize_struct_1(soap, (const struct struct_1 *)ptr);
		break;
	case SOAP_TYPE_PointerToSOAP_ENV__Reason:
		soap_serialize_PointerToSOAP_ENV__Reason(soap, (struct SOAP_ENV__Reason *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetTemplateInformationResponse:
		soap_serialize_PointerTo_ns1__GetTemplateInformationResponse(soap, (_ns1__GetTemplateInformationResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetTemplateInformation:
		soap_serialize_PointerTo_ns1__GetTemplateInformation(soap, (_ns1__GetTemplateInformation *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetTemplateTreeResponse:
		soap_serialize_PointerTo_ns1__GetTemplateTreeResponse(soap, (_ns1__GetTemplateTreeResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetTemplateTree:
		soap_serialize_PointerTo_ns1__GetTemplateTree(soap, (_ns1__GetTemplateTree *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__QueryResponse:
		soap_serialize_PointerTo_ns1__QueryResponse(soap, (_ns1__QueryResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__Query:
		soap_serialize_PointerTo_ns1__Query(soap, (_ns1__Query *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetTemplateConfigResponse:
		soap_serialize_PointerTo_ns1__GetTemplateConfigResponse(soap, (_ns1__GetTemplateConfigResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetTemplateConfig:
		soap_serialize_PointerTo_ns1__GetTemplateConfig(soap, (_ns1__GetTemplateConfig *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetTemplateResponse:
		soap_serialize_PointerTo_ns1__GetTemplateResponse(soap, (_ns1__GetTemplateResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetTemplate:
		soap_serialize_PointerTo_ns1__GetTemplate(soap, (_ns1__GetTemplate *const*)ptr);
		break;
	case SOAP_TYPE_PointerTostruct_5:
		soap_serialize_PointerTostruct_5(soap, (struct struct_5 *const*)ptr);
		break;
	case SOAP_TYPE_PointerTostruct_4:
		soap_serialize_PointerTostruct_4(soap, (struct struct_4 *const*)ptr);
		break;
	case SOAP_TYPE_PointerTostruct_3:
		soap_serialize_PointerTostruct_3(soap, (struct struct_3 *const*)ptr);
		break;
	case SOAP_TYPE_PointerTostruct_2:
		soap_serialize_PointerTostruct_2(soap, (struct struct_2 *const*)ptr);
		break;
	case SOAP_TYPE_PointerTostruct_1:
		soap_serialize_PointerTostruct_1(soap, (struct struct_1 *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char**)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char**)&ptr);
		break;
	}
}
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{
	switch (t)
	{
	case SOAP_TYPE__ns1__GetTemplate:
		return (void*)soap_instantiate__ns1__GetTemplate(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetTemplateResponse:
		return (void*)soap_instantiate__ns1__GetTemplateResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetTemplateConfig:
		return (void*)soap_instantiate__ns1__GetTemplateConfig(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetTemplateConfigResponse:
		return (void*)soap_instantiate__ns1__GetTemplateConfigResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__Query:
		return (void*)soap_instantiate__ns1__Query(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__QueryResponse:
		return (void*)soap_instantiate__ns1__QueryResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetTemplateTree:
		return (void*)soap_instantiate__ns1__GetTemplateTree(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetTemplateTreeResponse:
		return (void*)soap_instantiate__ns1__GetTemplateTreeResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetTemplateInformation:
		return (void*)soap_instantiate__ns1__GetTemplateInformation(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetTemplateInformationResponse:
		return (void*)soap_instantiate__ns1__GetTemplateInformationResponse(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE__ns1__GetTemplate:
		if (p->size < 0)
			delete (_ns1__GetTemplate*)p->ptr;
		else
			delete[] (_ns1__GetTemplate*)p->ptr;
		break;
	case SOAP_TYPE__ns1__GetTemplateResponse:
		if (p->size < 0)
			delete (_ns1__GetTemplateResponse*)p->ptr;
		else
			delete[] (_ns1__GetTemplateResponse*)p->ptr;
		break;
	case SOAP_TYPE__ns1__GetTemplateConfig:
		if (p->size < 0)
			delete (_ns1__GetTemplateConfig*)p->ptr;
		else
			delete[] (_ns1__GetTemplateConfig*)p->ptr;
		break;
	case SOAP_TYPE__ns1__GetTemplateConfigResponse:
		if (p->size < 0)
			delete (_ns1__GetTemplateConfigResponse*)p->ptr;
		else
			delete[] (_ns1__GetTemplateConfigResponse*)p->ptr;
		break;
	case SOAP_TYPE__ns1__Query:
		if (p->size < 0)
			delete (_ns1__Query*)p->ptr;
		else
			delete[] (_ns1__Query*)p->ptr;
		break;
	case SOAP_TYPE__ns1__QueryResponse:
		if (p->size < 0)
			delete (_ns1__QueryResponse*)p->ptr;
		else
			delete[] (_ns1__QueryResponse*)p->ptr;
		break;
	case SOAP_TYPE__ns1__GetTemplateTree:
		if (p->size < 0)
			delete (_ns1__GetTemplateTree*)p->ptr;
		else
			delete[] (_ns1__GetTemplateTree*)p->ptr;
		break;
	case SOAP_TYPE__ns1__GetTemplateTreeResponse:
		if (p->size < 0)
			delete (_ns1__GetTemplateTreeResponse*)p->ptr;
		else
			delete[] (_ns1__GetTemplateTreeResponse*)p->ptr;
		break;
	case SOAP_TYPE__ns1__GetTemplateInformation:
		if (p->size < 0)
			delete (_ns1__GetTemplateInformation*)p->ptr;
		else
			delete[] (_ns1__GetTemplateInformation*)p->ptr;
		break;
	case SOAP_TYPE__ns1__GetTemplateInformationResponse:
		if (p->size < 0)
			delete (_ns1__GetTemplateInformationResponse*)p->ptr;
		else
			delete[] (_ns1__GetTemplateInformationResponse*)p->ptr;
		break;
	}
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{
	return soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{
	return soap_inint(soap, tag, a, type, SOAP_TYPE_int);
}

void _ns1__GetTemplateInformationResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostruct_5(soap, &((_ns1__GetTemplateInformationResponse*)this)->GetTemplateInformationResult);
	/* transient soap skipped */
}

void _ns1__GetTemplateInformationResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	((_ns1__GetTemplateInformationResponse*)this)->GetTemplateInformationResult = NULL;
	/* transient soap skipped */
}

int _ns1__GetTemplateInformationResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__GetTemplateInformationResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__GetTemplateInformationResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetTemplateInformationResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetTemplateInformationResponse(struct soap *soap, const char *tag, int id, const _ns1__GetTemplateInformationResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetTemplateInformationResponse), type);
	soap_out_PointerTostruct_5(soap, "ns1:GetTemplateInformationResult", -1, &(((_ns1__GetTemplateInformationResponse*)a)->GetTemplateInformationResult), "");
	/* transient soap skipped */
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *_ns1__GetTemplateInformationResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetTemplateInformationResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetTemplateInformationResponse * SOAP_FMAC4 soap_get__ns1__GetTemplateInformationResponse(struct soap *soap, _ns1__GetTemplateInformationResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetTemplateInformationResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *_ns1__GetTemplateInformationResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetTemplateInformationResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetTemplateInformationResponse * SOAP_FMAC4 soap_in__ns1__GetTemplateInformationResponse(struct soap *soap, const char *tag, _ns1__GetTemplateInformationResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	a = (_ns1__GetTemplateInformationResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetTemplateInformationResponse, sizeof(_ns1__GetTemplateInformationResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetTemplateInformationResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetTemplateInformationResponse *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_GetTemplateInformationResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetTemplateInformationResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTostruct_5(soap, "ns1:GetTemplateInformationResult", &(((_ns1__GetTemplateInformationResponse*)a)->GetTemplateInformationResult), "struct-5"))
				{	soap_flag_GetTemplateInformationResult1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetTemplateInformationResponse *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetTemplateInformationResponse, 0, sizeof(_ns1__GetTemplateInformationResponse), 0, soap_copy__ns1__GetTemplateInformationResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__GetTemplateInformationResponse * SOAP_FMAC6 soap_new__ns1__GetTemplateInformationResponse(struct soap *soap, int n)
{	return soap_instantiate__ns1__GetTemplateInformationResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__GetTemplateInformationResponse(struct soap *soap, _ns1__GetTemplateInformationResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC5 _ns1__GetTemplateInformationResponse * SOAP_FMAC6 soap_instantiate__ns1__GetTemplateInformationResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetTemplateInformationResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetTemplateInformationResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__GetTemplateInformationResponse;
		if (size)
			*size = sizeof(_ns1__GetTemplateInformationResponse);
		((_ns1__GetTemplateInformationResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__GetTemplateInformationResponse[n];
		if (size)
			*size = n * sizeof(_ns1__GetTemplateInformationResponse);
		for (int i = 0; i < n; i++)
			((_ns1__GetTemplateInformationResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__GetTemplateInformationResponse*)cp->ptr;
}

SOAP_FMAC5 void SOAP_FMAC6 soap_copy__ns1__GetTemplateInformationResponse(struct soap *soap, int st, int tt, void *p, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetTemplateInformationResponse %p -> %p\n", q, p));
	*(_ns1__GetTemplateInformationResponse*)p = *(_ns1__GetTemplateInformationResponse*)q;
}

void _ns1__GetTemplateInformation::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

void _ns1__GetTemplateInformation::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

int _ns1__GetTemplateInformation::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__GetTemplateInformation);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__GetTemplateInformation::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetTemplateInformation(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetTemplateInformation(struct soap *soap, const char *tag, int id, const _ns1__GetTemplateInformation *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetTemplateInformation), type);
	/* transient soap skipped */
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *_ns1__GetTemplateInformation::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetTemplateInformation(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetTemplateInformation * SOAP_FMAC4 soap_get__ns1__GetTemplateInformation(struct soap *soap, _ns1__GetTemplateInformation *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetTemplateInformation(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *_ns1__GetTemplateInformation::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetTemplateInformation(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetTemplateInformation * SOAP_FMAC4 soap_in__ns1__GetTemplateInformation(struct soap *soap, const char *tag, _ns1__GetTemplateInformation *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	a = (_ns1__GetTemplateInformation *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetTemplateInformation, sizeof(_ns1__GetTemplateInformation), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetTemplateInformation)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetTemplateInformation *)a->soap_in(soap, tag, type);
		}
	};
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetTemplateInformation *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetTemplateInformation, 0, sizeof(_ns1__GetTemplateInformation), 0, soap_copy__ns1__GetTemplateInformation);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__GetTemplateInformation * SOAP_FMAC6 soap_new__ns1__GetTemplateInformation(struct soap *soap, int n)
{	return soap_instantiate__ns1__GetTemplateInformation(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__GetTemplateInformation(struct soap *soap, _ns1__GetTemplateInformation *p)
{	soap_delete(soap, p);
}

SOAP_FMAC5 _ns1__GetTemplateInformation * SOAP_FMAC6 soap_instantiate__ns1__GetTemplateInformation(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetTemplateInformation(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetTemplateInformation, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__GetTemplateInformation;
		if (size)
			*size = sizeof(_ns1__GetTemplateInformation);
		((_ns1__GetTemplateInformation*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__GetTemplateInformation[n];
		if (size)
			*size = n * sizeof(_ns1__GetTemplateInformation);
		for (int i = 0; i < n; i++)
			((_ns1__GetTemplateInformation*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__GetTemplateInformation*)cp->ptr;
}

SOAP_FMAC5 void SOAP_FMAC6 soap_copy__ns1__GetTemplateInformation(struct soap *soap, int st, int tt, void *p, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetTemplateInformation %p -> %p\n", q, p));
	*(_ns1__GetTemplateInformation*)p = *(_ns1__GetTemplateInformation*)q;
}

void _ns1__GetTemplateTreeResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostruct_4(soap, &((_ns1__GetTemplateTreeResponse*)this)->GetTemplateTreeResult);
	/* transient soap skipped */
}

void _ns1__GetTemplateTreeResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	((_ns1__GetTemplateTreeResponse*)this)->GetTemplateTreeResult = NULL;
	/* transient soap skipped */
}

int _ns1__GetTemplateTreeResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__GetTemplateTreeResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__GetTemplateTreeResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetTemplateTreeResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetTemplateTreeResponse(struct soap *soap, const char *tag, int id, const _ns1__GetTemplateTreeResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetTemplateTreeResponse), type);
	soap_out_PointerTostruct_4(soap, "ns1:GetTemplateTreeResult", -1, &(((_ns1__GetTemplateTreeResponse*)a)->GetTemplateTreeResult), "");
	/* transient soap skipped */
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *_ns1__GetTemplateTreeResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetTemplateTreeResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetTemplateTreeResponse * SOAP_FMAC4 soap_get__ns1__GetTemplateTreeResponse(struct soap *soap, _ns1__GetTemplateTreeResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetTemplateTreeResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *_ns1__GetTemplateTreeResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetTemplateTreeResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetTemplateTreeResponse * SOAP_FMAC4 soap_in__ns1__GetTemplateTreeResponse(struct soap *soap, const char *tag, _ns1__GetTemplateTreeResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	a = (_ns1__GetTemplateTreeResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetTemplateTreeResponse, sizeof(_ns1__GetTemplateTreeResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetTemplateTreeResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetTemplateTreeResponse *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_GetTemplateTreeResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetTemplateTreeResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTostruct_4(soap, "ns1:GetTemplateTreeResult", &(((_ns1__GetTemplateTreeResponse*)a)->GetTemplateTreeResult), "struct-4"))
				{	soap_flag_GetTemplateTreeResult1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetTemplateTreeResponse *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetTemplateTreeResponse, 0, sizeof(_ns1__GetTemplateTreeResponse), 0, soap_copy__ns1__GetTemplateTreeResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__GetTemplateTreeResponse * SOAP_FMAC6 soap_new__ns1__GetTemplateTreeResponse(struct soap *soap, int n)
{	return soap_instantiate__ns1__GetTemplateTreeResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__GetTemplateTreeResponse(struct soap *soap, _ns1__GetTemplateTreeResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC5 _ns1__GetTemplateTreeResponse * SOAP_FMAC6 soap_instantiate__ns1__GetTemplateTreeResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetTemplateTreeResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetTemplateTreeResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__GetTemplateTreeResponse;
		if (size)
			*size = sizeof(_ns1__GetTemplateTreeResponse);
		((_ns1__GetTemplateTreeResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__GetTemplateTreeResponse[n];
		if (size)
			*size = n * sizeof(_ns1__GetTemplateTreeResponse);
		for (int i = 0; i < n; i++)
			((_ns1__GetTemplateTreeResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__GetTemplateTreeResponse*)cp->ptr;
}

SOAP_FMAC5 void SOAP_FMAC6 soap_copy__ns1__GetTemplateTreeResponse(struct soap *soap, int st, int tt, void *p, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetTemplateTreeResponse %p -> %p\n", q, p));
	*(_ns1__GetTemplateTreeResponse*)p = *(_ns1__GetTemplateTreeResponse*)q;
}

void _ns1__GetTemplateTree::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

void _ns1__GetTemplateTree::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

int _ns1__GetTemplateTree::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__GetTemplateTree);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__GetTemplateTree::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetTemplateTree(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetTemplateTree(struct soap *soap, const char *tag, int id, const _ns1__GetTemplateTree *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetTemplateTree), type);
	/* transient soap skipped */
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *_ns1__GetTemplateTree::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetTemplateTree(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetTemplateTree * SOAP_FMAC4 soap_get__ns1__GetTemplateTree(struct soap *soap, _ns1__GetTemplateTree *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetTemplateTree(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *_ns1__GetTemplateTree::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetTemplateTree(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetTemplateTree * SOAP_FMAC4 soap_in__ns1__GetTemplateTree(struct soap *soap, const char *tag, _ns1__GetTemplateTree *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	a = (_ns1__GetTemplateTree *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetTemplateTree, sizeof(_ns1__GetTemplateTree), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetTemplateTree)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetTemplateTree *)a->soap_in(soap, tag, type);
		}
	};
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetTemplateTree *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetTemplateTree, 0, sizeof(_ns1__GetTemplateTree), 0, soap_copy__ns1__GetTemplateTree);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__GetTemplateTree * SOAP_FMAC6 soap_new__ns1__GetTemplateTree(struct soap *soap, int n)
{	return soap_instantiate__ns1__GetTemplateTree(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__GetTemplateTree(struct soap *soap, _ns1__GetTemplateTree *p)
{	soap_delete(soap, p);
}

SOAP_FMAC5 _ns1__GetTemplateTree * SOAP_FMAC6 soap_instantiate__ns1__GetTemplateTree(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetTemplateTree(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetTemplateTree, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__GetTemplateTree;
		if (size)
			*size = sizeof(_ns1__GetTemplateTree);
		((_ns1__GetTemplateTree*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__GetTemplateTree[n];
		if (size)
			*size = n * sizeof(_ns1__GetTemplateTree);
		for (int i = 0; i < n; i++)
			((_ns1__GetTemplateTree*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__GetTemplateTree*)cp->ptr;
}

SOAP_FMAC5 void SOAP_FMAC6 soap_copy__ns1__GetTemplateTree(struct soap *soap, int st, int tt, void *p, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetTemplateTree %p -> %p\n", q, p));
	*(_ns1__GetTemplateTree*)p = *(_ns1__GetTemplateTree*)q;
}

void _ns1__QueryResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostruct_3(soap, &((_ns1__QueryResponse*)this)->QueryResult);
	/* transient soap skipped */
}

void _ns1__QueryResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	((_ns1__QueryResponse*)this)->QueryResult = NULL;
	/* transient soap skipped */
}

int _ns1__QueryResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__QueryResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__QueryResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__QueryResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__QueryResponse(struct soap *soap, const char *tag, int id, const _ns1__QueryResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__QueryResponse), type);
	soap_out_PointerTostruct_3(soap, "ns1:QueryResult", -1, &(((_ns1__QueryResponse*)a)->QueryResult), "");
	/* transient soap skipped */
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *_ns1__QueryResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__QueryResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__QueryResponse * SOAP_FMAC4 soap_get__ns1__QueryResponse(struct soap *soap, _ns1__QueryResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__QueryResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *_ns1__QueryResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__QueryResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__QueryResponse * SOAP_FMAC4 soap_in__ns1__QueryResponse(struct soap *soap, const char *tag, _ns1__QueryResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	a = (_ns1__QueryResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__QueryResponse, sizeof(_ns1__QueryResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__QueryResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__QueryResponse *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_QueryResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_QueryResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTostruct_3(soap, "ns1:QueryResult", &(((_ns1__QueryResponse*)a)->QueryResult), "struct-3"))
				{	soap_flag_QueryResult1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__QueryResponse *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE__ns1__QueryResponse, 0, sizeof(_ns1__QueryResponse), 0, soap_copy__ns1__QueryResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__QueryResponse * SOAP_FMAC6 soap_new__ns1__QueryResponse(struct soap *soap, int n)
{	return soap_instantiate__ns1__QueryResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__QueryResponse(struct soap *soap, _ns1__QueryResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC5 _ns1__QueryResponse * SOAP_FMAC6 soap_instantiate__ns1__QueryResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__QueryResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__QueryResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__QueryResponse;
		if (size)
			*size = sizeof(_ns1__QueryResponse);
		((_ns1__QueryResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__QueryResponse[n];
		if (size)
			*size = n * sizeof(_ns1__QueryResponse);
		for (int i = 0; i < n; i++)
			((_ns1__QueryResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__QueryResponse*)cp->ptr;
}

SOAP_FMAC5 void SOAP_FMAC6 soap_copy__ns1__QueryResponse(struct soap *soap, int st, int tt, void *p, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__QueryResponse %p -> %p\n", q, p));
	*(_ns1__QueryResponse*)p = *(_ns1__QueryResponse*)q;
}

void _ns1__Query::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &((_ns1__Query*)this)->dateStartString);
	soap_serialize_string(soap, &((_ns1__Query*)this)->dateEndString);
	soap_serialize_string(soap, &((_ns1__Query*)this)->inputCells);
	/* transient soap skipped */
}

void _ns1__Query::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &((_ns1__Query*)this)->templateId);
	soap_default_int(soap, &((_ns1__Query*)this)->useSavedReport);
	soap_default_string(soap, &((_ns1__Query*)this)->dateStartString);
	soap_default_string(soap, &((_ns1__Query*)this)->dateEndString);
	soap_default_string(soap, &((_ns1__Query*)this)->inputCells);
	/* transient soap skipped */
}

int _ns1__Query::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__Query);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__Query::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__Query(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__Query(struct soap *soap, const char *tag, int id, const _ns1__Query *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__Query), type);
	soap_out_int(soap, "ns1:templateId", -1, &(((_ns1__Query*)a)->templateId), "");
	soap_out_int(soap, "ns1:useSavedReport", -1, &(((_ns1__Query*)a)->useSavedReport), "");
	soap_out_string(soap, "ns1:dateStartString", -1, &(((_ns1__Query*)a)->dateStartString), "");
	soap_out_string(soap, "ns1:dateEndString", -1, &(((_ns1__Query*)a)->dateEndString), "");
	soap_out_string(soap, "ns1:inputCells", -1, &(((_ns1__Query*)a)->inputCells), "");
	/* transient soap skipped */
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *_ns1__Query::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__Query(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__Query * SOAP_FMAC4 soap_get__ns1__Query(struct soap *soap, _ns1__Query *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__Query(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *_ns1__Query::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__Query(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__Query * SOAP_FMAC4 soap_in__ns1__Query(struct soap *soap, const char *tag, _ns1__Query *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	a = (_ns1__Query *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__Query, sizeof(_ns1__Query), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__Query)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__Query *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_templateId1 = 1, soap_flag_useSavedReport1 = 1, soap_flag_dateStartString1 = 1, soap_flag_dateEndString1 = 1, soap_flag_inputCells1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_templateId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:templateId", &(((_ns1__Query*)a)->templateId), "xsd:int"))
				{	soap_flag_templateId1--;
					continue;
				}
			if (soap_flag_useSavedReport1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:useSavedReport", &(((_ns1__Query*)a)->useSavedReport), "xsd:int"))
				{	soap_flag_useSavedReport1--;
					continue;
				}
			if (soap_flag_dateStartString1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:dateStartString", &(((_ns1__Query*)a)->dateStartString), "xsd:string"))
				{	soap_flag_dateStartString1--;
					continue;
				}
			if (soap_flag_dateEndString1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:dateEndString", &(((_ns1__Query*)a)->dateEndString), "xsd:string"))
				{	soap_flag_dateEndString1--;
					continue;
				}
			if (soap_flag_inputCells1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:inputCells", &(((_ns1__Query*)a)->inputCells), "xsd:string"))
				{	soap_flag_inputCells1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_templateId1 > 0 || soap_flag_useSavedReport1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__Query *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE__ns1__Query, 0, sizeof(_ns1__Query), 0, soap_copy__ns1__Query);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__Query * SOAP_FMAC6 soap_new__ns1__Query(struct soap *soap, int n)
{	return soap_instantiate__ns1__Query(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__Query(struct soap *soap, _ns1__Query *p)
{	soap_delete(soap, p);
}

SOAP_FMAC5 _ns1__Query * SOAP_FMAC6 soap_instantiate__ns1__Query(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__Query(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__Query, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__Query;
		if (size)
			*size = sizeof(_ns1__Query);
		((_ns1__Query*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__Query[n];
		if (size)
			*size = n * sizeof(_ns1__Query);
		for (int i = 0; i < n; i++)
			((_ns1__Query*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__Query*)cp->ptr;
}

SOAP_FMAC5 void SOAP_FMAC6 soap_copy__ns1__Query(struct soap *soap, int st, int tt, void *p, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__Query %p -> %p\n", q, p));
	*(_ns1__Query*)p = *(_ns1__Query*)q;
}

void _ns1__GetTemplateConfigResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostruct_2(soap, &((_ns1__GetTemplateConfigResponse*)this)->GetTemplateConfigResult);
	/* transient soap skipped */
}

void _ns1__GetTemplateConfigResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	((_ns1__GetTemplateConfigResponse*)this)->GetTemplateConfigResult = NULL;
	/* transient soap skipped */
}

int _ns1__GetTemplateConfigResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__GetTemplateConfigResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__GetTemplateConfigResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetTemplateConfigResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetTemplateConfigResponse(struct soap *soap, const char *tag, int id, const _ns1__GetTemplateConfigResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetTemplateConfigResponse), type);
	soap_out_PointerTostruct_2(soap, "ns1:GetTemplateConfigResult", -1, &(((_ns1__GetTemplateConfigResponse*)a)->GetTemplateConfigResult), "");
	/* transient soap skipped */
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *_ns1__GetTemplateConfigResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetTemplateConfigResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetTemplateConfigResponse * SOAP_FMAC4 soap_get__ns1__GetTemplateConfigResponse(struct soap *soap, _ns1__GetTemplateConfigResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetTemplateConfigResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *_ns1__GetTemplateConfigResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetTemplateConfigResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetTemplateConfigResponse * SOAP_FMAC4 soap_in__ns1__GetTemplateConfigResponse(struct soap *soap, const char *tag, _ns1__GetTemplateConfigResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	a = (_ns1__GetTemplateConfigResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetTemplateConfigResponse, sizeof(_ns1__GetTemplateConfigResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetTemplateConfigResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetTemplateConfigResponse *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_GetTemplateConfigResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetTemplateConfigResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTostruct_2(soap, "ns1:GetTemplateConfigResult", &(((_ns1__GetTemplateConfigResponse*)a)->GetTemplateConfigResult), "struct-2"))
				{	soap_flag_GetTemplateConfigResult1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetTemplateConfigResponse *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetTemplateConfigResponse, 0, sizeof(_ns1__GetTemplateConfigResponse), 0, soap_copy__ns1__GetTemplateConfigResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__GetTemplateConfigResponse * SOAP_FMAC6 soap_new__ns1__GetTemplateConfigResponse(struct soap *soap, int n)
{	return soap_instantiate__ns1__GetTemplateConfigResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__GetTemplateConfigResponse(struct soap *soap, _ns1__GetTemplateConfigResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC5 _ns1__GetTemplateConfigResponse * SOAP_FMAC6 soap_instantiate__ns1__GetTemplateConfigResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetTemplateConfigResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetTemplateConfigResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__GetTemplateConfigResponse;
		if (size)
			*size = sizeof(_ns1__GetTemplateConfigResponse);
		((_ns1__GetTemplateConfigResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__GetTemplateConfigResponse[n];
		if (size)
			*size = n * sizeof(_ns1__GetTemplateConfigResponse);
		for (int i = 0; i < n; i++)
			((_ns1__GetTemplateConfigResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__GetTemplateConfigResponse*)cp->ptr;
}

SOAP_FMAC5 void SOAP_FMAC6 soap_copy__ns1__GetTemplateConfigResponse(struct soap *soap, int st, int tt, void *p, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetTemplateConfigResponse %p -> %p\n", q, p));
	*(_ns1__GetTemplateConfigResponse*)p = *(_ns1__GetTemplateConfigResponse*)q;
}

void _ns1__GetTemplateConfig::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

void _ns1__GetTemplateConfig::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &((_ns1__GetTemplateConfig*)this)->templateId);
	/* transient soap skipped */
}

int _ns1__GetTemplateConfig::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__GetTemplateConfig);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__GetTemplateConfig::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetTemplateConfig(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetTemplateConfig(struct soap *soap, const char *tag, int id, const _ns1__GetTemplateConfig *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetTemplateConfig), type);
	soap_out_int(soap, "ns1:templateId", -1, &(((_ns1__GetTemplateConfig*)a)->templateId), "");
	/* transient soap skipped */
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *_ns1__GetTemplateConfig::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetTemplateConfig(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetTemplateConfig * SOAP_FMAC4 soap_get__ns1__GetTemplateConfig(struct soap *soap, _ns1__GetTemplateConfig *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetTemplateConfig(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *_ns1__GetTemplateConfig::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetTemplateConfig(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetTemplateConfig * SOAP_FMAC4 soap_in__ns1__GetTemplateConfig(struct soap *soap, const char *tag, _ns1__GetTemplateConfig *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	a = (_ns1__GetTemplateConfig *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetTemplateConfig, sizeof(_ns1__GetTemplateConfig), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetTemplateConfig)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetTemplateConfig *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_templateId1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_templateId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:templateId", &(((_ns1__GetTemplateConfig*)a)->templateId), "xsd:int"))
				{	soap_flag_templateId1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_templateId1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetTemplateConfig *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetTemplateConfig, 0, sizeof(_ns1__GetTemplateConfig), 0, soap_copy__ns1__GetTemplateConfig);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__GetTemplateConfig * SOAP_FMAC6 soap_new__ns1__GetTemplateConfig(struct soap *soap, int n)
{	return soap_instantiate__ns1__GetTemplateConfig(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__GetTemplateConfig(struct soap *soap, _ns1__GetTemplateConfig *p)
{	soap_delete(soap, p);
}

SOAP_FMAC5 _ns1__GetTemplateConfig * SOAP_FMAC6 soap_instantiate__ns1__GetTemplateConfig(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetTemplateConfig(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetTemplateConfig, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__GetTemplateConfig;
		if (size)
			*size = sizeof(_ns1__GetTemplateConfig);
		((_ns1__GetTemplateConfig*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__GetTemplateConfig[n];
		if (size)
			*size = n * sizeof(_ns1__GetTemplateConfig);
		for (int i = 0; i < n; i++)
			((_ns1__GetTemplateConfig*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__GetTemplateConfig*)cp->ptr;
}

SOAP_FMAC5 void SOAP_FMAC6 soap_copy__ns1__GetTemplateConfig(struct soap *soap, int st, int tt, void *p, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetTemplateConfig %p -> %p\n", q, p));
	*(_ns1__GetTemplateConfig*)p = *(_ns1__GetTemplateConfig*)q;
}

void _ns1__GetTemplateResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostruct_1(soap, &((_ns1__GetTemplateResponse*)this)->GetTemplateResult);
	/* transient soap skipped */
}

void _ns1__GetTemplateResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	((_ns1__GetTemplateResponse*)this)->GetTemplateResult = NULL;
	/* transient soap skipped */
}

int _ns1__GetTemplateResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__GetTemplateResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__GetTemplateResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetTemplateResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetTemplateResponse(struct soap *soap, const char *tag, int id, const _ns1__GetTemplateResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetTemplateResponse), type);
	soap_out_PointerTostruct_1(soap, "ns1:GetTemplateResult", -1, &(((_ns1__GetTemplateResponse*)a)->GetTemplateResult), "");
	/* transient soap skipped */
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *_ns1__GetTemplateResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetTemplateResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetTemplateResponse * SOAP_FMAC4 soap_get__ns1__GetTemplateResponse(struct soap *soap, _ns1__GetTemplateResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetTemplateResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *_ns1__GetTemplateResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetTemplateResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetTemplateResponse * SOAP_FMAC4 soap_in__ns1__GetTemplateResponse(struct soap *soap, const char *tag, _ns1__GetTemplateResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	a = (_ns1__GetTemplateResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetTemplateResponse, sizeof(_ns1__GetTemplateResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetTemplateResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetTemplateResponse *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_GetTemplateResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetTemplateResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTostruct_1(soap, "ns1:GetTemplateResult", &(((_ns1__GetTemplateResponse*)a)->GetTemplateResult), "struct-1"))
				{	soap_flag_GetTemplateResult1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetTemplateResponse *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetTemplateResponse, 0, sizeof(_ns1__GetTemplateResponse), 0, soap_copy__ns1__GetTemplateResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__GetTemplateResponse * SOAP_FMAC6 soap_new__ns1__GetTemplateResponse(struct soap *soap, int n)
{	return soap_instantiate__ns1__GetTemplateResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__GetTemplateResponse(struct soap *soap, _ns1__GetTemplateResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC5 _ns1__GetTemplateResponse * SOAP_FMAC6 soap_instantiate__ns1__GetTemplateResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetTemplateResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetTemplateResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__GetTemplateResponse;
		if (size)
			*size = sizeof(_ns1__GetTemplateResponse);
		((_ns1__GetTemplateResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__GetTemplateResponse[n];
		if (size)
			*size = n * sizeof(_ns1__GetTemplateResponse);
		for (int i = 0; i < n; i++)
			((_ns1__GetTemplateResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__GetTemplateResponse*)cp->ptr;
}

SOAP_FMAC5 void SOAP_FMAC6 soap_copy__ns1__GetTemplateResponse(struct soap *soap, int st, int tt, void *p, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetTemplateResponse %p -> %p\n", q, p));
	*(_ns1__GetTemplateResponse*)p = *(_ns1__GetTemplateResponse*)q;
}

void _ns1__GetTemplate::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

void _ns1__GetTemplate::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &((_ns1__GetTemplate*)this)->templateId);
	/* transient soap skipped */
}

int _ns1__GetTemplate::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__GetTemplate);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__GetTemplate::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetTemplate(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetTemplate(struct soap *soap, const char *tag, int id, const _ns1__GetTemplate *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetTemplate), type);
	soap_out_int(soap, "ns1:templateId", -1, &(((_ns1__GetTemplate*)a)->templateId), "");
	/* transient soap skipped */
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *_ns1__GetTemplate::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetTemplate(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetTemplate * SOAP_FMAC4 soap_get__ns1__GetTemplate(struct soap *soap, _ns1__GetTemplate *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetTemplate(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *_ns1__GetTemplate::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetTemplate(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetTemplate * SOAP_FMAC4 soap_in__ns1__GetTemplate(struct soap *soap, const char *tag, _ns1__GetTemplate *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	a = (_ns1__GetTemplate *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetTemplate, sizeof(_ns1__GetTemplate), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetTemplate)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetTemplate *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_templateId1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_templateId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:templateId", &(((_ns1__GetTemplate*)a)->templateId), "xsd:int"))
				{	soap_flag_templateId1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_templateId1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetTemplate *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetTemplate, 0, sizeof(_ns1__GetTemplate), 0, soap_copy__ns1__GetTemplate);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__GetTemplate * SOAP_FMAC6 soap_new__ns1__GetTemplate(struct soap *soap, int n)
{	return soap_instantiate__ns1__GetTemplate(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__GetTemplate(struct soap *soap, _ns1__GetTemplate *p)
{	soap_delete(soap, p);
}

SOAP_FMAC5 _ns1__GetTemplate * SOAP_FMAC6 soap_instantiate__ns1__GetTemplate(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetTemplate(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetTemplate, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__GetTemplate;
		if (size)
			*size = sizeof(_ns1__GetTemplate);
		((_ns1__GetTemplate*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__GetTemplate[n];
		if (size)
			*size = n * sizeof(_ns1__GetTemplate);
		for (int i = 0; i < n; i++)
			((_ns1__GetTemplate*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__GetTemplate*)cp->ptr;
}

SOAP_FMAC5 void SOAP_FMAC6 soap_copy__ns1__GetTemplate(struct soap *soap, int st, int tt, void *p, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetTemplate %p -> %p\n", q, p));
	*(_ns1__GetTemplate*)p = *(_ns1__GetTemplate*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type);
	soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, "");
	soap_out_string(soap, "faultstring", -1, &a->faultstring, "");
	soap_out_string(soap, "faultactor", -1, &a->faultactor, "");
	soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, "");
	soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, "");
	soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, "");
	soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, "");
	soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, "");
	soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	short soap_flag_faultcode = 1, soap_flag_faultstring = 1, soap_flag_faultactor = 1, soap_flag_detail = 1, soap_flag_SOAP_ENV__Code = 1, soap_flag_SOAP_ENV__Reason = 1, soap_flag_SOAP_ENV__Node = 1, soap_flag_SOAP_ENV__Role = 1, soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type);
	soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	short soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__type = 0;
	a->fault = NULL;
	a->__any = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type);
	soap_putelement(soap, a->fault, "fault", -1, a->__type);
	soap_outliteral(soap, "-any", &a->__any);
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	short soap_flag_fault = 1, soap_flag___any = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type);
	soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, "");
	soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	short soap_flag_SOAP_ENV__Value = 1, soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	/* transient dummy skipped */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	/* transient dummy skipped */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type);
	/* transient dummy skipped */
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
		/* transient dummy skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetTemplateInformation_(struct soap *soap, const struct __ns1__GetTemplateInformation_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__GetTemplateInformation(soap, &a->ns1__GetTemplateInformation);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetTemplateInformation_(struct soap *soap, struct __ns1__GetTemplateInformation_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetTemplateInformation = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetTemplateInformation_(struct soap *soap, const struct __ns1__GetTemplateInformation_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__GetTemplateInformation_(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetTemplateInformation_(struct soap *soap, const char *tag, int id, const struct __ns1__GetTemplateInformation_ *a, const char *type)
{
	soap_out_PointerTo_ns1__GetTemplateInformation(soap, "ns1:GetTemplateInformation", -1, &a->ns1__GetTemplateInformation, "");
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetTemplateInformation_ * SOAP_FMAC4 soap_get___ns1__GetTemplateInformation_(struct soap *soap, struct __ns1__GetTemplateInformation_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetTemplateInformation_(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct __ns1__GetTemplateInformation_ * SOAP_FMAC4 soap_in___ns1__GetTemplateInformation_(struct soap *soap, const char *tag, struct __ns1__GetTemplateInformation_ *a, const char *type)
{
	short soap_flag_ns1__GetTemplateInformation = 1;
	a = (struct __ns1__GetTemplateInformation_ *)soap_id_enter(soap, soap->id, a, SOAP_TYPE___ns1__GetTemplateInformation_, sizeof(struct __ns1__GetTemplateInformation_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetTemplateInformation_(soap, a);
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetTemplateInformation && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetTemplateInformation(soap, "ns1:GetTemplateInformation", &a->ns1__GetTemplateInformation, ""))
				{	soap_flag_ns1__GetTemplateInformation--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetTemplateTree_(struct soap *soap, const struct __ns1__GetTemplateTree_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__GetTemplateTree(soap, &a->ns1__GetTemplateTree);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetTemplateTree_(struct soap *soap, struct __ns1__GetTemplateTree_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetTemplateTree = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetTemplateTree_(struct soap *soap, const struct __ns1__GetTemplateTree_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__GetTemplateTree_(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetTemplateTree_(struct soap *soap, const char *tag, int id, const struct __ns1__GetTemplateTree_ *a, const char *type)
{
	soap_out_PointerTo_ns1__GetTemplateTree(soap, "ns1:GetTemplateTree", -1, &a->ns1__GetTemplateTree, "");
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetTemplateTree_ * SOAP_FMAC4 soap_get___ns1__GetTemplateTree_(struct soap *soap, struct __ns1__GetTemplateTree_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetTemplateTree_(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct __ns1__GetTemplateTree_ * SOAP_FMAC4 soap_in___ns1__GetTemplateTree_(struct soap *soap, const char *tag, struct __ns1__GetTemplateTree_ *a, const char *type)
{
	short soap_flag_ns1__GetTemplateTree = 1;
	a = (struct __ns1__GetTemplateTree_ *)soap_id_enter(soap, soap->id, a, SOAP_TYPE___ns1__GetTemplateTree_, sizeof(struct __ns1__GetTemplateTree_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetTemplateTree_(soap, a);
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetTemplateTree && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetTemplateTree(soap, "ns1:GetTemplateTree", &a->ns1__GetTemplateTree, ""))
				{	soap_flag_ns1__GetTemplateTree--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Query_(struct soap *soap, const struct __ns1__Query_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__Query(soap, &a->ns1__Query);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Query_(struct soap *soap, struct __ns1__Query_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__Query = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Query_(struct soap *soap, const struct __ns1__Query_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__Query_(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Query_(struct soap *soap, const char *tag, int id, const struct __ns1__Query_ *a, const char *type)
{
	soap_out_PointerTo_ns1__Query(soap, "ns1:Query", -1, &a->ns1__Query, "");
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Query_ * SOAP_FMAC4 soap_get___ns1__Query_(struct soap *soap, struct __ns1__Query_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__Query_(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct __ns1__Query_ * SOAP_FMAC4 soap_in___ns1__Query_(struct soap *soap, const char *tag, struct __ns1__Query_ *a, const char *type)
{
	short soap_flag_ns1__Query = 1;
	a = (struct __ns1__Query_ *)soap_id_enter(soap, soap->id, a, SOAP_TYPE___ns1__Query_, sizeof(struct __ns1__Query_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__Query_(soap, a);
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__Query && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__Query(soap, "ns1:Query", &a->ns1__Query, ""))
				{	soap_flag_ns1__Query--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetTemplateConfig_(struct soap *soap, const struct __ns1__GetTemplateConfig_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__GetTemplateConfig(soap, &a->ns1__GetTemplateConfig);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetTemplateConfig_(struct soap *soap, struct __ns1__GetTemplateConfig_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetTemplateConfig = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetTemplateConfig_(struct soap *soap, const struct __ns1__GetTemplateConfig_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__GetTemplateConfig_(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetTemplateConfig_(struct soap *soap, const char *tag, int id, const struct __ns1__GetTemplateConfig_ *a, const char *type)
{
	soap_out_PointerTo_ns1__GetTemplateConfig(soap, "ns1:GetTemplateConfig", -1, &a->ns1__GetTemplateConfig, "");
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetTemplateConfig_ * SOAP_FMAC4 soap_get___ns1__GetTemplateConfig_(struct soap *soap, struct __ns1__GetTemplateConfig_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetTemplateConfig_(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct __ns1__GetTemplateConfig_ * SOAP_FMAC4 soap_in___ns1__GetTemplateConfig_(struct soap *soap, const char *tag, struct __ns1__GetTemplateConfig_ *a, const char *type)
{
	short soap_flag_ns1__GetTemplateConfig = 1;
	a = (struct __ns1__GetTemplateConfig_ *)soap_id_enter(soap, soap->id, a, SOAP_TYPE___ns1__GetTemplateConfig_, sizeof(struct __ns1__GetTemplateConfig_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetTemplateConfig_(soap, a);
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetTemplateConfig && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetTemplateConfig(soap, "ns1:GetTemplateConfig", &a->ns1__GetTemplateConfig, ""))
				{	soap_flag_ns1__GetTemplateConfig--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetTemplate_(struct soap *soap, const struct __ns1__GetTemplate_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__GetTemplate(soap, &a->ns1__GetTemplate);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetTemplate_(struct soap *soap, struct __ns1__GetTemplate_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetTemplate = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetTemplate_(struct soap *soap, const struct __ns1__GetTemplate_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__GetTemplate_(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetTemplate_(struct soap *soap, const char *tag, int id, const struct __ns1__GetTemplate_ *a, const char *type)
{
	soap_out_PointerTo_ns1__GetTemplate(soap, "ns1:GetTemplate", -1, &a->ns1__GetTemplate, "");
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetTemplate_ * SOAP_FMAC4 soap_get___ns1__GetTemplate_(struct soap *soap, struct __ns1__GetTemplate_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetTemplate_(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct __ns1__GetTemplate_ * SOAP_FMAC4 soap_in___ns1__GetTemplate_(struct soap *soap, const char *tag, struct __ns1__GetTemplate_ *a, const char *type)
{
	short soap_flag_ns1__GetTemplate = 1;
	a = (struct __ns1__GetTemplate_ *)soap_id_enter(soap, soap->id, a, SOAP_TYPE___ns1__GetTemplate_, sizeof(struct __ns1__GetTemplate_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetTemplate_(soap, a);
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetTemplate && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetTemplate(soap, "ns1:GetTemplate", &a->ns1__GetTemplate, ""))
				{	soap_flag_ns1__GetTemplate--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetTemplateInformation(struct soap *soap, const struct __ns1__GetTemplateInformation *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__GetTemplateInformation(soap, &a->ns1__GetTemplateInformation);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetTemplateInformation(struct soap *soap, struct __ns1__GetTemplateInformation *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetTemplateInformation = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetTemplateInformation(struct soap *soap, const struct __ns1__GetTemplateInformation *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__GetTemplateInformation(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetTemplateInformation(struct soap *soap, const char *tag, int id, const struct __ns1__GetTemplateInformation *a, const char *type)
{
	soap_out_PointerTo_ns1__GetTemplateInformation(soap, "ns1:GetTemplateInformation", -1, &a->ns1__GetTemplateInformation, "");
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetTemplateInformation * SOAP_FMAC4 soap_get___ns1__GetTemplateInformation(struct soap *soap, struct __ns1__GetTemplateInformation *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetTemplateInformation(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct __ns1__GetTemplateInformation * SOAP_FMAC4 soap_in___ns1__GetTemplateInformation(struct soap *soap, const char *tag, struct __ns1__GetTemplateInformation *a, const char *type)
{
	short soap_flag_ns1__GetTemplateInformation = 1;
	a = (struct __ns1__GetTemplateInformation *)soap_id_enter(soap, soap->id, a, SOAP_TYPE___ns1__GetTemplateInformation, sizeof(struct __ns1__GetTemplateInformation), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetTemplateInformation(soap, a);
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetTemplateInformation && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetTemplateInformation(soap, "ns1:GetTemplateInformation", &a->ns1__GetTemplateInformation, ""))
				{	soap_flag_ns1__GetTemplateInformation--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetTemplateTree(struct soap *soap, const struct __ns1__GetTemplateTree *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__GetTemplateTree(soap, &a->ns1__GetTemplateTree);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetTemplateTree(struct soap *soap, struct __ns1__GetTemplateTree *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetTemplateTree = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetTemplateTree(struct soap *soap, const struct __ns1__GetTemplateTree *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__GetTemplateTree(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetTemplateTree(struct soap *soap, const char *tag, int id, const struct __ns1__GetTemplateTree *a, const char *type)
{
	soap_out_PointerTo_ns1__GetTemplateTree(soap, "ns1:GetTemplateTree", -1, &a->ns1__GetTemplateTree, "");
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetTemplateTree * SOAP_FMAC4 soap_get___ns1__GetTemplateTree(struct soap *soap, struct __ns1__GetTemplateTree *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetTemplateTree(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct __ns1__GetTemplateTree * SOAP_FMAC4 soap_in___ns1__GetTemplateTree(struct soap *soap, const char *tag, struct __ns1__GetTemplateTree *a, const char *type)
{
	short soap_flag_ns1__GetTemplateTree = 1;
	a = (struct __ns1__GetTemplateTree *)soap_id_enter(soap, soap->id, a, SOAP_TYPE___ns1__GetTemplateTree, sizeof(struct __ns1__GetTemplateTree), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetTemplateTree(soap, a);
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetTemplateTree && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetTemplateTree(soap, "ns1:GetTemplateTree", &a->ns1__GetTemplateTree, ""))
				{	soap_flag_ns1__GetTemplateTree--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Query(struct soap *soap, const struct __ns1__Query *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__Query(soap, &a->ns1__Query);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Query(struct soap *soap, struct __ns1__Query *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__Query = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Query(struct soap *soap, const struct __ns1__Query *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__Query(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Query(struct soap *soap, const char *tag, int id, const struct __ns1__Query *a, const char *type)
{
	soap_out_PointerTo_ns1__Query(soap, "ns1:Query", -1, &a->ns1__Query, "");
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Query * SOAP_FMAC4 soap_get___ns1__Query(struct soap *soap, struct __ns1__Query *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__Query(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct __ns1__Query * SOAP_FMAC4 soap_in___ns1__Query(struct soap *soap, const char *tag, struct __ns1__Query *a, const char *type)
{
	short soap_flag_ns1__Query = 1;
	a = (struct __ns1__Query *)soap_id_enter(soap, soap->id, a, SOAP_TYPE___ns1__Query, sizeof(struct __ns1__Query), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__Query(soap, a);
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__Query && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__Query(soap, "ns1:Query", &a->ns1__Query, ""))
				{	soap_flag_ns1__Query--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetTemplateConfig(struct soap *soap, const struct __ns1__GetTemplateConfig *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__GetTemplateConfig(soap, &a->ns1__GetTemplateConfig);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetTemplateConfig(struct soap *soap, struct __ns1__GetTemplateConfig *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetTemplateConfig = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetTemplateConfig(struct soap *soap, const struct __ns1__GetTemplateConfig *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__GetTemplateConfig(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetTemplateConfig(struct soap *soap, const char *tag, int id, const struct __ns1__GetTemplateConfig *a, const char *type)
{
	soap_out_PointerTo_ns1__GetTemplateConfig(soap, "ns1:GetTemplateConfig", -1, &a->ns1__GetTemplateConfig, "");
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetTemplateConfig * SOAP_FMAC4 soap_get___ns1__GetTemplateConfig(struct soap *soap, struct __ns1__GetTemplateConfig *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetTemplateConfig(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct __ns1__GetTemplateConfig * SOAP_FMAC4 soap_in___ns1__GetTemplateConfig(struct soap *soap, const char *tag, struct __ns1__GetTemplateConfig *a, const char *type)
{
	short soap_flag_ns1__GetTemplateConfig = 1;
	a = (struct __ns1__GetTemplateConfig *)soap_id_enter(soap, soap->id, a, SOAP_TYPE___ns1__GetTemplateConfig, sizeof(struct __ns1__GetTemplateConfig), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetTemplateConfig(soap, a);
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetTemplateConfig && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetTemplateConfig(soap, "ns1:GetTemplateConfig", &a->ns1__GetTemplateConfig, ""))
				{	soap_flag_ns1__GetTemplateConfig--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetTemplate(struct soap *soap, const struct __ns1__GetTemplate *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__GetTemplate(soap, &a->ns1__GetTemplate);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetTemplate(struct soap *soap, struct __ns1__GetTemplate *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetTemplate = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetTemplate(struct soap *soap, const struct __ns1__GetTemplate *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__GetTemplate(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetTemplate(struct soap *soap, const char *tag, int id, const struct __ns1__GetTemplate *a, const char *type)
{
	soap_out_PointerTo_ns1__GetTemplate(soap, "ns1:GetTemplate", -1, &a->ns1__GetTemplate, "");
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetTemplate * SOAP_FMAC4 soap_get___ns1__GetTemplate(struct soap *soap, struct __ns1__GetTemplate *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetTemplate(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct __ns1__GetTemplate * SOAP_FMAC4 soap_in___ns1__GetTemplate(struct soap *soap, const char *tag, struct __ns1__GetTemplate *a, const char *type)
{
	short soap_flag_ns1__GetTemplate = 1;
	a = (struct __ns1__GetTemplate *)soap_id_enter(soap, soap->id, a, SOAP_TYPE___ns1__GetTemplate, sizeof(struct __ns1__GetTemplate), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetTemplate(soap, a);
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetTemplate && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetTemplate(soap, "ns1:GetTemplate", &a->ns1__GetTemplate, ""))
				{	soap_flag_ns1__GetTemplate--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_struct_5(struct soap *soap, const struct struct_5 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_struct_5(struct soap *soap, struct struct_5 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_struct_5(struct soap *soap, const struct struct_5 *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_struct_5);
	if (soap_out_struct_5(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_struct_5(struct soap *soap, const char *tag, int id, const struct struct_5 *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_struct_5), type);
	soap_outliteral(soap, "-any", &a->__any);
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct struct_5 * SOAP_FMAC4 soap_get_struct_5(struct soap *soap, struct struct_5 *p, const char *tag, const char *type)
{
	if ((p = soap_in_struct_5(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct struct_5 * SOAP_FMAC4 soap_in_struct_5(struct soap *soap, const char *tag, struct struct_5 *a, const char *type)
{
	short soap_flag___any = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct struct_5 *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_struct_5, sizeof(struct struct_5), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_struct_5(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct struct_5 *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_struct_5, 0, sizeof(struct struct_5), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_struct_4(struct soap *soap, const struct struct_4 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_struct_4(struct soap *soap, struct struct_4 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_struct_4(struct soap *soap, const struct struct_4 *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_struct_4);
	if (soap_out_struct_4(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_struct_4(struct soap *soap, const char *tag, int id, const struct struct_4 *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_struct_4), type);
	soap_outliteral(soap, "-any", &a->__any);
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct struct_4 * SOAP_FMAC4 soap_get_struct_4(struct soap *soap, struct struct_4 *p, const char *tag, const char *type)
{
	if ((p = soap_in_struct_4(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct struct_4 * SOAP_FMAC4 soap_in_struct_4(struct soap *soap, const char *tag, struct struct_4 *a, const char *type)
{
	short soap_flag___any = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct struct_4 *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_struct_4, sizeof(struct struct_4), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_struct_4(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct struct_4 *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_struct_4, 0, sizeof(struct struct_4), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_struct_3(struct soap *soap, const struct struct_3 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_struct_3(struct soap *soap, struct struct_3 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_struct_3(struct soap *soap, const struct struct_3 *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_struct_3);
	if (soap_out_struct_3(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_struct_3(struct soap *soap, const char *tag, int id, const struct struct_3 *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_struct_3), type);
	soap_outliteral(soap, "-any", &a->__any);
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct struct_3 * SOAP_FMAC4 soap_get_struct_3(struct soap *soap, struct struct_3 *p, const char *tag, const char *type)
{
	if ((p = soap_in_struct_3(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct struct_3 * SOAP_FMAC4 soap_in_struct_3(struct soap *soap, const char *tag, struct struct_3 *a, const char *type)
{
	short soap_flag___any = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct struct_3 *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_struct_3, sizeof(struct struct_3), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_struct_3(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct struct_3 *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_struct_3, 0, sizeof(struct struct_3), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_struct_2(struct soap *soap, const struct struct_2 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_struct_2(struct soap *soap, struct struct_2 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_struct_2(struct soap *soap, const struct struct_2 *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_struct_2);
	if (soap_out_struct_2(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_struct_2(struct soap *soap, const char *tag, int id, const struct struct_2 *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_struct_2), type);
	soap_outliteral(soap, "-any", &a->__any);
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct struct_2 * SOAP_FMAC4 soap_get_struct_2(struct soap *soap, struct struct_2 *p, const char *tag, const char *type)
{
	if ((p = soap_in_struct_2(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct struct_2 * SOAP_FMAC4 soap_in_struct_2(struct soap *soap, const char *tag, struct struct_2 *a, const char *type)
{
	short soap_flag___any = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct struct_2 *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_struct_2, sizeof(struct struct_2), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_struct_2(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct struct_2 *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_struct_2, 0, sizeof(struct struct_2), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_struct_1(struct soap *soap, const struct struct_1 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_struct_1(struct soap *soap, struct struct_1 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_struct_1(struct soap *soap, const struct struct_1 *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_struct_1);
	if (soap_out_struct_1(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_struct_1(struct soap *soap, const char *tag, int id, const struct struct_1 *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_struct_1), type);
	soap_outliteral(soap, "-any", &a->__any);
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct struct_1 * SOAP_FMAC4 soap_get_struct_1(struct soap *soap, struct struct_1 *p, const char *tag, const char *type)
{
	if ((p = soap_in_struct_1(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct struct_1 * SOAP_FMAC4 soap_in_struct_1(struct soap *soap, const char *tag, struct struct_1 *a, const char *type)
{
	short soap_flag___any = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct struct_1 *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_struct_1, sizeof(struct struct_1), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_struct_1(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct struct_1 *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_struct_1, 0, sizeof(struct struct_1), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetTemplateInformationResponse(struct soap *soap, _ns1__GetTemplateInformationResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetTemplateInformationResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetTemplateInformationResponse(struct soap *soap, _ns1__GetTemplateInformationResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__GetTemplateInformationResponse);
	if (soap_out_PointerTo_ns1__GetTemplateInformationResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetTemplateInformationResponse(struct soap *soap, const char *tag, int id, _ns1__GetTemplateInformationResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetTemplateInformationResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetTemplateInformationResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetTemplateInformationResponse(struct soap *soap, _ns1__GetTemplateInformationResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetTemplateInformationResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 _ns1__GetTemplateInformationResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetTemplateInformationResponse(struct soap *soap, const char *tag, _ns1__GetTemplateInformationResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetTemplateInformationResponse **)soap_malloc(soap, sizeof(_ns1__GetTemplateInformationResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetTemplateInformationResponse *)soap_instantiate__ns1__GetTemplateInformationResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	a = (_ns1__GetTemplateInformationResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetTemplateInformationResponse, sizeof(_ns1__GetTemplateInformationResponse), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetTemplateInformation(struct soap *soap, _ns1__GetTemplateInformation *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetTemplateInformation))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetTemplateInformation(struct soap *soap, _ns1__GetTemplateInformation *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__GetTemplateInformation);
	if (soap_out_PointerTo_ns1__GetTemplateInformation(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetTemplateInformation(struct soap *soap, const char *tag, int id, _ns1__GetTemplateInformation *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetTemplateInformation);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetTemplateInformation ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetTemplateInformation(struct soap *soap, _ns1__GetTemplateInformation **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetTemplateInformation(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 _ns1__GetTemplateInformation ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetTemplateInformation(struct soap *soap, const char *tag, _ns1__GetTemplateInformation **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetTemplateInformation **)soap_malloc(soap, sizeof(_ns1__GetTemplateInformation *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetTemplateInformation *)soap_instantiate__ns1__GetTemplateInformation(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	a = (_ns1__GetTemplateInformation **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetTemplateInformation, sizeof(_ns1__GetTemplateInformation), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetTemplateTreeResponse(struct soap *soap, _ns1__GetTemplateTreeResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetTemplateTreeResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetTemplateTreeResponse(struct soap *soap, _ns1__GetTemplateTreeResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__GetTemplateTreeResponse);
	if (soap_out_PointerTo_ns1__GetTemplateTreeResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetTemplateTreeResponse(struct soap *soap, const char *tag, int id, _ns1__GetTemplateTreeResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetTemplateTreeResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetTemplateTreeResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetTemplateTreeResponse(struct soap *soap, _ns1__GetTemplateTreeResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetTemplateTreeResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 _ns1__GetTemplateTreeResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetTemplateTreeResponse(struct soap *soap, const char *tag, _ns1__GetTemplateTreeResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetTemplateTreeResponse **)soap_malloc(soap, sizeof(_ns1__GetTemplateTreeResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetTemplateTreeResponse *)soap_instantiate__ns1__GetTemplateTreeResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	a = (_ns1__GetTemplateTreeResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetTemplateTreeResponse, sizeof(_ns1__GetTemplateTreeResponse), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetTemplateTree(struct soap *soap, _ns1__GetTemplateTree *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetTemplateTree))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetTemplateTree(struct soap *soap, _ns1__GetTemplateTree *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__GetTemplateTree);
	if (soap_out_PointerTo_ns1__GetTemplateTree(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetTemplateTree(struct soap *soap, const char *tag, int id, _ns1__GetTemplateTree *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetTemplateTree);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetTemplateTree ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetTemplateTree(struct soap *soap, _ns1__GetTemplateTree **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetTemplateTree(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 _ns1__GetTemplateTree ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetTemplateTree(struct soap *soap, const char *tag, _ns1__GetTemplateTree **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetTemplateTree **)soap_malloc(soap, sizeof(_ns1__GetTemplateTree *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetTemplateTree *)soap_instantiate__ns1__GetTemplateTree(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	a = (_ns1__GetTemplateTree **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetTemplateTree, sizeof(_ns1__GetTemplateTree), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__QueryResponse(struct soap *soap, _ns1__QueryResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__QueryResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__QueryResponse(struct soap *soap, _ns1__QueryResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__QueryResponse);
	if (soap_out_PointerTo_ns1__QueryResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__QueryResponse(struct soap *soap, const char *tag, int id, _ns1__QueryResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__QueryResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__QueryResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__QueryResponse(struct soap *soap, _ns1__QueryResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__QueryResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 _ns1__QueryResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__QueryResponse(struct soap *soap, const char *tag, _ns1__QueryResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1))
		return NULL;
	if (!a)
		if (!(a = (_ns1__QueryResponse **)soap_malloc(soap, sizeof(_ns1__QueryResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__QueryResponse *)soap_instantiate__ns1__QueryResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	a = (_ns1__QueryResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__QueryResponse, sizeof(_ns1__QueryResponse), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__Query(struct soap *soap, _ns1__Query *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__Query))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__Query(struct soap *soap, _ns1__Query *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__Query);
	if (soap_out_PointerTo_ns1__Query(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__Query(struct soap *soap, const char *tag, int id, _ns1__Query *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__Query);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__Query ** SOAP_FMAC4 soap_get_PointerTo_ns1__Query(struct soap *soap, _ns1__Query **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__Query(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 _ns1__Query ** SOAP_FMAC4 soap_in_PointerTo_ns1__Query(struct soap *soap, const char *tag, _ns1__Query **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1))
		return NULL;
	if (!a)
		if (!(a = (_ns1__Query **)soap_malloc(soap, sizeof(_ns1__Query *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__Query *)soap_instantiate__ns1__Query(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	a = (_ns1__Query **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__Query, sizeof(_ns1__Query), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetTemplateConfigResponse(struct soap *soap, _ns1__GetTemplateConfigResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetTemplateConfigResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetTemplateConfigResponse(struct soap *soap, _ns1__GetTemplateConfigResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__GetTemplateConfigResponse);
	if (soap_out_PointerTo_ns1__GetTemplateConfigResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetTemplateConfigResponse(struct soap *soap, const char *tag, int id, _ns1__GetTemplateConfigResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetTemplateConfigResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetTemplateConfigResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetTemplateConfigResponse(struct soap *soap, _ns1__GetTemplateConfigResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetTemplateConfigResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 _ns1__GetTemplateConfigResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetTemplateConfigResponse(struct soap *soap, const char *tag, _ns1__GetTemplateConfigResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetTemplateConfigResponse **)soap_malloc(soap, sizeof(_ns1__GetTemplateConfigResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetTemplateConfigResponse *)soap_instantiate__ns1__GetTemplateConfigResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	a = (_ns1__GetTemplateConfigResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetTemplateConfigResponse, sizeof(_ns1__GetTemplateConfigResponse), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetTemplateConfig(struct soap *soap, _ns1__GetTemplateConfig *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetTemplateConfig))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetTemplateConfig(struct soap *soap, _ns1__GetTemplateConfig *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__GetTemplateConfig);
	if (soap_out_PointerTo_ns1__GetTemplateConfig(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetTemplateConfig(struct soap *soap, const char *tag, int id, _ns1__GetTemplateConfig *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetTemplateConfig);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetTemplateConfig ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetTemplateConfig(struct soap *soap, _ns1__GetTemplateConfig **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetTemplateConfig(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 _ns1__GetTemplateConfig ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetTemplateConfig(struct soap *soap, const char *tag, _ns1__GetTemplateConfig **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetTemplateConfig **)soap_malloc(soap, sizeof(_ns1__GetTemplateConfig *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetTemplateConfig *)soap_instantiate__ns1__GetTemplateConfig(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	a = (_ns1__GetTemplateConfig **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetTemplateConfig, sizeof(_ns1__GetTemplateConfig), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetTemplateResponse(struct soap *soap, _ns1__GetTemplateResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetTemplateResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetTemplateResponse(struct soap *soap, _ns1__GetTemplateResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__GetTemplateResponse);
	if (soap_out_PointerTo_ns1__GetTemplateResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetTemplateResponse(struct soap *soap, const char *tag, int id, _ns1__GetTemplateResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetTemplateResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetTemplateResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetTemplateResponse(struct soap *soap, _ns1__GetTemplateResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetTemplateResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 _ns1__GetTemplateResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetTemplateResponse(struct soap *soap, const char *tag, _ns1__GetTemplateResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetTemplateResponse **)soap_malloc(soap, sizeof(_ns1__GetTemplateResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetTemplateResponse *)soap_instantiate__ns1__GetTemplateResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	a = (_ns1__GetTemplateResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetTemplateResponse, sizeof(_ns1__GetTemplateResponse), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetTemplate(struct soap *soap, _ns1__GetTemplate *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetTemplate))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetTemplate(struct soap *soap, _ns1__GetTemplate *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__GetTemplate);
	if (soap_out_PointerTo_ns1__GetTemplate(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetTemplate(struct soap *soap, const char *tag, int id, _ns1__GetTemplate *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetTemplate);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetTemplate ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetTemplate(struct soap *soap, _ns1__GetTemplate **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetTemplate(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 _ns1__GetTemplate ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetTemplate(struct soap *soap, const char *tag, _ns1__GetTemplate **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetTemplate **)soap_malloc(soap, sizeof(_ns1__GetTemplate *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetTemplate *)soap_instantiate__ns1__GetTemplate(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	a = (_ns1__GetTemplate **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetTemplate, sizeof(_ns1__GetTemplate), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostruct_5(struct soap *soap, struct struct_5 *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_struct_5))
		soap_serialize_struct_5(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostruct_5(struct soap *soap, struct struct_5 *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTostruct_5);
	if (soap_out_PointerTostruct_5(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostruct_5(struct soap *soap, const char *tag, int id, struct struct_5 *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_struct_5);
	if (id < 0)
		return soap->error;
	return soap_out_struct_5(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct struct_5 ** SOAP_FMAC4 soap_get_PointerTostruct_5(struct soap *soap, struct struct_5 **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostruct_5(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct struct_5 ** SOAP_FMAC4 soap_in_PointerTostruct_5(struct soap *soap, const char *tag, struct struct_5 **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1))
		return NULL;
	if (!a)
		if (!(a = (struct struct_5 **)soap_malloc(soap, sizeof(struct struct_5 *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_struct_5(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct struct_5 **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_struct_5, sizeof(struct struct_5), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostruct_4(struct soap *soap, struct struct_4 *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_struct_4))
		soap_serialize_struct_4(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostruct_4(struct soap *soap, struct struct_4 *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTostruct_4);
	if (soap_out_PointerTostruct_4(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostruct_4(struct soap *soap, const char *tag, int id, struct struct_4 *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_struct_4);
	if (id < 0)
		return soap->error;
	return soap_out_struct_4(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct struct_4 ** SOAP_FMAC4 soap_get_PointerTostruct_4(struct soap *soap, struct struct_4 **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostruct_4(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct struct_4 ** SOAP_FMAC4 soap_in_PointerTostruct_4(struct soap *soap, const char *tag, struct struct_4 **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1))
		return NULL;
	if (!a)
		if (!(a = (struct struct_4 **)soap_malloc(soap, sizeof(struct struct_4 *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_struct_4(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct struct_4 **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_struct_4, sizeof(struct struct_4), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostruct_3(struct soap *soap, struct struct_3 *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_struct_3))
		soap_serialize_struct_3(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostruct_3(struct soap *soap, struct struct_3 *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTostruct_3);
	if (soap_out_PointerTostruct_3(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostruct_3(struct soap *soap, const char *tag, int id, struct struct_3 *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_struct_3);
	if (id < 0)
		return soap->error;
	return soap_out_struct_3(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct struct_3 ** SOAP_FMAC4 soap_get_PointerTostruct_3(struct soap *soap, struct struct_3 **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostruct_3(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct struct_3 ** SOAP_FMAC4 soap_in_PointerTostruct_3(struct soap *soap, const char *tag, struct struct_3 **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1))
		return NULL;
	if (!a)
		if (!(a = (struct struct_3 **)soap_malloc(soap, sizeof(struct struct_3 *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_struct_3(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct struct_3 **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_struct_3, sizeof(struct struct_3), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostruct_2(struct soap *soap, struct struct_2 *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_struct_2))
		soap_serialize_struct_2(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostruct_2(struct soap *soap, struct struct_2 *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTostruct_2);
	if (soap_out_PointerTostruct_2(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostruct_2(struct soap *soap, const char *tag, int id, struct struct_2 *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_struct_2);
	if (id < 0)
		return soap->error;
	return soap_out_struct_2(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct struct_2 ** SOAP_FMAC4 soap_get_PointerTostruct_2(struct soap *soap, struct struct_2 **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostruct_2(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct struct_2 ** SOAP_FMAC4 soap_in_PointerTostruct_2(struct soap *soap, const char *tag, struct struct_2 **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1))
		return NULL;
	if (!a)
		if (!(a = (struct struct_2 **)soap_malloc(soap, sizeof(struct struct_2 *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_struct_2(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct struct_2 **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_struct_2, sizeof(struct struct_2), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostruct_1(struct soap *soap, struct struct_1 *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_struct_1))
		soap_serialize_struct_1(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostruct_1(struct soap *soap, struct struct_1 *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTostruct_1);
	if (soap_out_PointerTostruct_1(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostruct_1(struct soap *soap, const char *tag, int id, struct struct_1 *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_struct_1);
	if (id < 0)
		return soap->error;
	return soap_out_struct_1(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct struct_1 ** SOAP_FMAC4 soap_get_PointerTostruct_1(struct soap *soap, struct struct_1 **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostruct_1(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct struct_1 ** SOAP_FMAC4 soap_in_PointerTostruct_1(struct soap *soap, const char *tag, struct struct_1 **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1))
		return NULL;
	if (!a)
		if (!(a = (struct struct_1 **)soap_malloc(soap, sizeof(struct struct_1 *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_struct_1(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct struct_1 **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_struct_1, sizeof(struct struct_1), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default__QName(struct soap *soap, char **a)
{	soap_default_string(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{	soap_serialize_string(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, -1, -1);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_string);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, -1, -1);
}

/* End of soapC.cpp */

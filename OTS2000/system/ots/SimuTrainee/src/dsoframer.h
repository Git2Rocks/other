/****************************************************************************
**
** Namespace DSOFramer generated by dumpcpp from type library
** dsoframer.ocx
**
****************************************************************************/

#ifndef QAX_DUMPCPP_DSOFRAMER_H
#define QAX_DUMPCPP_DSOFRAMER_H

// Define this symbol to __declspec(dllexport) or __declspec(dllimport)
#ifndef DSOFRAMER_EXPORT
#define DSOFRAMER_EXPORT
#endif

#include <QApplication>
#include <QtGui>
#include <QtCore/QCoreApplication>   
#include <qaxobject.h>
#include <qaxwidget.h>
#include <qdatetime.h>
#include <qpixmap.h>

struct IDispatch;


// Referenced namespace

namespace DSOFramer {

    enum dsoActivationPolicy {
        dsoDefaultBehavior      = 0,
        dsoKeepUIActiveOnAppDeactive= 1,
        dsoCompDeactivateOnLostFocus= 2,
        dsoIPDeactivateOnCompDeactive= 4
    };

    enum dsoBorderStyle {
        dsoBorderNone           = 0,
        dsoBorderFlat           = 1,
        dsoBorder3D             = 2,
        dsoBorder3DThin         = 3
    };

    enum dsoFileCommandType {
        dsoFileNew              = 0,
        dsoFileOpen             = 1,
        dsoFileClose            = 2,
        dsoFileSave             = 3,
        dsoFileSaveAs           = 4,
        dsoFilePrint            = 5,
        dsoFilePageSetup        = 6,
        dsoFileProperties       = 7,
        dsoFilePrintPreview     = 8
    };

    enum dsoFrameHookPolicy {
        dsoNormalBehavior       = 0,
        dsoSetOnFirstOpen       = 1,
        dsoResetNow             = 2,
        dsoDisableHook          = -1
    };

    enum dsoShowDialogType {
        dsoDialogNew            = 0,
        dsoDialogOpen           = 1,
        dsoDialogSave           = 2,
        dsoDialogSaveCopy       = 3,
        dsoDialogPrint          = 4,
        dsoDialogPageSetup      = 5,
        dsoDialogProperties     = 6
    };

// forward declarations
    enum dsoBorderStyle;
    enum dsoShowDialogType;
    enum dsoFileCommandType;
    enum dsoActivationPolicy;
    enum dsoFrameHookPolicy;
    enum dsoBorderStyle;
    enum dsoShowDialogType;
    enum dsoFileCommandType;
    enum dsoActivationPolicy;
    enum dsoFrameHookPolicy;

class DSOFRAMER_EXPORT _FramerControl : public QAxObject
{
public:
    _FramerControl(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property ActivationPolicy

    Allows host to set policy on activation behavior.

    */
    inline DSOFramer::dsoActivationPolicy ActivationPolicy() const; //Returns the value of ActivationPolicy
    inline void SetActivationPolicy(DSOFramer::dsoActivationPolicy value); //Sets the value of the ActivationPolicy property

    /*
    Property ActiveDocument

    Returns the Automation interface of the document object.

    */
    inline IDispatch* ActiveDocument() const; //Returns the value of ActiveDocument

    /*
    Property BackColor

    Returns/sets the background color of the control.

    */
    inline QColor BackColor() const; //Returns the value of BackColor
    inline void SetBackColor(const QColor& value); //Sets the value of the BackColor property

    /*
    Property BorderColor

    Returns/sets the border color of the control.

    */
    inline QColor BorderColor() const; //Returns the value of BorderColor
    inline void SetBorderColor(const QColor& value); //Sets the value of the BorderColor property

    /*
    Property BorderStyle

    Returns/sets the border style for the control.

    */
    inline DSOFramer::dsoBorderStyle BorderStyle() const; //Returns the value of BorderStyle
    inline void SetBorderStyle(DSOFramer::dsoBorderStyle value); //Sets the value of the BorderStyle property

    /*
    Property Caption

    Returns/sets the titlebar caption.

    */
    inline QString Caption() const; //Returns the value of Caption
    inline void SetCaption(const QString& value); //Sets the value of the Caption property

    /*
    Property DocumentFullName

    Returns full document path name for object.

    */
    inline QString DocumentFullName() const; //Returns the value of DocumentFullName

    /*
    Property DocumentName

    Returns just the document name (excluding path).

    */
    inline QString DocumentName() const; //Returns the value of DocumentName

    /*
    Property EventsEnabled

    Gets/sets whether control events are raised.

    */
    inline bool EventsEnabled() const; //Returns the value of EventsEnabled
    inline void SetEventsEnabled(bool value); //Sets the value of the EventsEnabled property

    /*
    Property ForeColor

    Returns/sets the foreground color of the control.

    */
    inline QColor ForeColor() const; //Returns the value of ForeColor
    inline void SetForeColor(const QColor& value); //Sets the value of the ForeColor property

    /*
    Property FrameHookPolicy

    Allows host to set policy on use of the frame hook.

    */
    inline DSOFramer::dsoFrameHookPolicy FrameHookPolicy() const; //Returns the value of FrameHookPolicy
    inline void SetFrameHookPolicy(DSOFramer::dsoFrameHookPolicy value); //Sets the value of the FrameHookPolicy property

    /*
    Property HostName

    Returns/sets host application name (used in embedding).

    */
    inline QString HostName() const; //Returns the value of HostName
    inline void SetHostName(const QString& value); //Sets the value of the HostName property

    /*
    Property IsDirty

    Returns True/False if file has been altered or needs save.

    */
    inline bool IsDirty() const; //Returns the value of IsDirty

    /*
    Property IsReadOnly

    Returns True/False if file was open read-only, or has not been saved.

    */
    inline bool IsReadOnly() const; //Returns the value of IsReadOnly

    /*
    Property LockServer

    Sets lock on the current embed server to keep it running (document must be open first).

    */
    inline bool LockServer() const; //Returns the value of LockServer
    inline void SetLockServer(bool value); //Sets the value of the LockServer property

    /*
    Property MenuAccelerators

    Gets/sets whether control should try to handle menu accelerators or pass to host window.

    */
    inline bool MenuAccelerators() const; //Returns the value of MenuAccelerators
    inline void SetMenuAccelerators(bool value); //Sets the value of the MenuAccelerators property

    /*
    Property Menubar

    Returns/sets whether a menu bar should be displayed.

    */
    inline bool Menubar() const; //Returns the value of Menubar
    inline void SetMenubar(bool value); //Sets the value of the Menubar property

    /*
    Property ModalState

    Returns/sets the controls modal state.

    */
    inline bool ModalState() const; //Returns the value of ModalState
    inline void SetModalState(bool value); //Sets the value of the ModalState property

    /*
    Property Titlebar

    Returns/sets whether the titlebar should be displayed.

    */
    inline bool Titlebar() const; //Returns the value of Titlebar
    inline void SetTitlebar(bool value); //Sets the value of the Titlebar property

    /*
    Property TitlebarColor

    Returns/sets the color of the titlebar.

    */
    inline QColor TitlebarColor() const; //Returns the value of TitlebarColor
    inline void SetTitlebarColor(const QColor& value); //Sets the value of the TitlebarColor property

    /*
    Property TitlebarTextColor

    Returns/sets the color of text for the titlebar.

    */
    inline QColor TitlebarTextColor() const; //Returns the value of TitlebarTextColor
    inline void SetTitlebarTextColor(const QColor& value); //Sets the value of the TitlebarTextColor property

    /*
    Property Toolbars

    Returns/sets whether toolbars should be displayed.

    */
    inline bool Toolbars() const; //Returns the value of Toolbars
    inline void SetToolbars(bool value); //Sets the value of the Toolbars property

    /*
    Method Activate

    Activates the current document object.

    */
    inline void Activate();

    /*
    Method Close

    Closes the currently open document.

    */
    inline void Close();

    /*
    Method CreateNew

    Creates a new document based on the ProgId or Template file provided.

    */
    inline void CreateNew(const QString& ProgIdOrTemplate);

    /*
    Method EnableFileCommand

    Returns/sets whether a specific action item is enabled.

    */
    inline bool EnableFileCommand(DSOFramer::dsoFileCommandType Item);

    /*
    Method ExecOleCommand

    Calls IOleCommandTarget::Exec on embedded object.

    */
    inline void ExecOleCommand(int OLECMDID);

    /*
    Method ExecOleCommand

    Calls IOleCommandTarget::Exec on embedded object.

    */
    inline void ExecOleCommand(int OLECMDID, const QVariant& Options);

    /*
    Method ExecOleCommand

    Calls IOleCommandTarget::Exec on embedded object.

    */
    inline void ExecOleCommand(int OLECMDID, const QVariant& Options, QVariant& vInParam);

    /*
    Method ExecOleCommand

    Calls IOleCommandTarget::Exec on embedded object.

    */
    inline void ExecOleCommand(int OLECMDID, const QVariant& Options, QVariant& vInParam, QVariant& vInOutParam);

    /*
    Method GetDataObjectContent

    Gets the content of the body of the document (excluding headers/footers).

    */
    inline QVariant GetDataObjectContent(const QVariant& ClipFormatNameOrNumber);

    /*
    Method Open

    Opens a document from a file, URL, or Automation object.

    */
    inline void Open(const QVariant& Document);

    /*
    Method Open

    Opens a document from a file, URL, or Automation object.

    */
    inline void Open(const QVariant& Document, const QVariant& ReadOnly);

    /*
    Method Open

    Opens a document from a file, URL, or Automation object.

    */
    inline void Open(const QVariant& Document, const QVariant& ReadOnly, const QVariant& ProgId);

    /*
    Method Open

    Opens a document from a file, URL, or Automation object.

    */
    inline void Open(const QVariant& Document, const QVariant& ReadOnly, const QVariant& ProgId, const QVariant& WebUsername);

    /*
    Method Open

    Opens a document from a file, URL, or Automation object.

    */
    inline void Open(const QVariant& Document, const QVariant& ReadOnly, const QVariant& ProgId, const QVariant& WebUsername, const QVariant& WebPassword);

    /*
    Method PrintOut

    Prints current document to specific printer with settings.

    */
    inline void PrintOut();

    /*
    Method PrintOut

    Prints current document to specific printer with settings.

    */
    inline void PrintOut(const QVariant& PromptUser);

    /*
    Method PrintOut

    Prints current document to specific printer with settings.

    */
    inline void PrintOut(const QVariant& PromptUser, const QVariant& PrinterName);

    /*
    Method PrintOut

    Prints current document to specific printer with settings.

    */
    inline void PrintOut(const QVariant& PromptUser, const QVariant& PrinterName, const QVariant& Copies);

    /*
    Method PrintOut

    Prints current document to specific printer with settings.

    */
    inline void PrintOut(const QVariant& PromptUser, const QVariant& PrinterName, const QVariant& Copies, const QVariant& FromPage);

    /*
    Method PrintOut

    Prints current document to specific printer with settings.

    */
    inline void PrintOut(const QVariant& PromptUser, const QVariant& PrinterName, const QVariant& Copies, const QVariant& FromPage, const QVariant& ToPage);

    /*
    Method PrintOut

    Prints current document to specific printer with settings.

    */
    inline void PrintOut(const QVariant& PromptUser, const QVariant& PrinterName, const QVariant& Copies, const QVariant& FromPage, const QVariant& ToPage, const QVariant& OutputFile);

    /*
    Method PrintPreview

    Starts a print preview (if document supports it).

    */
    inline void PrintPreview();

    /*
    Method PrintPreviewExit

    Exits a current print preview.

    */
    inline void PrintPreviewExit();

    /*
    Method Save

    Saves the document to specified location or its original location.

    */
    inline void Save();

    /*
    Method Save

    Saves the document to specified location or its original location.

    */
    inline void Save(const QVariant& SaveAsDocument);

    /*
    Method Save

    Saves the document to specified location or its original location.

    */
    inline void Save(const QVariant& SaveAsDocument, const QVariant& OverwriteExisting);

    /*
    Method Save

    Saves the document to specified location or its original location.

    */
    inline void Save(const QVariant& SaveAsDocument, const QVariant& OverwriteExisting, const QVariant& WebUsername);

    /*
    Method Save

    Saves the document to specified location or its original location.

    */
    inline void Save(const QVariant& SaveAsDocument, const QVariant& OverwriteExisting, const QVariant& WebUsername, const QVariant& WebPassword);

    /*
    Method SetDataObjectContent

    Sets the content of the body of the document.

    */
    inline void SetDataObjectContent(const QVariant& ClipFormatNameOrNumber, const QVariant& DataByteArray);

    /*
    Method SetEnableFileCommand
    */
    inline void SetEnableFileCommand(DSOFramer::dsoFileCommandType Item, bool rhs);

    /*
    Method ShowDialog

    Displays a modal dialog of the given type for user action.

    */
    inline void ShowDialog(DSOFramer::dsoShowDialogType DlgType);

    /*
    Method _PrintOutOld
    */
    inline void _PrintOutOld();

    /*
    Method _PrintOutOld
    */
    inline void _PrintOutOld(const QVariant& PromptToSelectPrinter);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

// skipping event interface _DFramerCtlEvents

// Actual coclasses
class DSOFRAMER_EXPORT FramerControl : public QAxWidget
{
public:
    FramerControl(QWidget *parent = 0, Qt::WindowFlags f = 0)
    : QAxWidget(parent, f)
    {
        setControl("{00460182-9e5e-11d5-b7c8-b8269041dd57}");
    }

    /*
    Property ActivationPolicy

    Allows host to set policy on activation behavior.

    */
    inline DSOFramer::dsoActivationPolicy ActivationPolicy() const; //Returns the value of ActivationPolicy
    inline void SetActivationPolicy(DSOFramer::dsoActivationPolicy value); //Sets the value of the ActivationPolicy property

    /*
    Property ActiveDocument

    Returns the Automation interface of the document object.

    */
    inline IDispatch* ActiveDocument() const; //Returns the value of ActiveDocument

    /*
    Property BackColor

    Returns/sets the background color of the control.

    */
    inline QColor BackColor() const; //Returns the value of BackColor
    inline void SetBackColor(const QColor& value); //Sets the value of the BackColor property

    /*
    Property BorderColor

    Returns/sets the border color of the control.

    */
    inline QColor BorderColor() const; //Returns the value of BorderColor
    inline void SetBorderColor(const QColor& value); //Sets the value of the BorderColor property

    /*
    Property BorderStyle

    Returns/sets the border style for the control.

    */
    inline DSOFramer::dsoBorderStyle BorderStyle() const; //Returns the value of BorderStyle
    inline void SetBorderStyle(DSOFramer::dsoBorderStyle value); //Sets the value of the BorderStyle property

    /*
    Property Caption

    Returns/sets the titlebar caption.

    */
    inline QString Caption() const; //Returns the value of Caption
    inline void SetCaption(const QString& value); //Sets the value of the Caption property

    /*
    Property DocumentFullName

    Returns full document path name for object.

    */
    inline QString DocumentFullName() const; //Returns the value of DocumentFullName

    /*
    Property DocumentName

    Returns just the document name (excluding path).

    */
    inline QString DocumentName() const; //Returns the value of DocumentName

    /*
    Property EventsEnabled

    Gets/sets whether control events are raised.

    */
    inline bool EventsEnabled() const; //Returns the value of EventsEnabled
    inline void SetEventsEnabled(bool value); //Sets the value of the EventsEnabled property

    /*
    Property ForeColor

    Returns/sets the foreground color of the control.

    */
    inline QColor ForeColor() const; //Returns the value of ForeColor
    inline void SetForeColor(const QColor& value); //Sets the value of the ForeColor property

    /*
    Property FrameHookPolicy

    Allows host to set policy on use of the frame hook.

    */
    inline DSOFramer::dsoFrameHookPolicy FrameHookPolicy() const; //Returns the value of FrameHookPolicy
    inline void SetFrameHookPolicy(DSOFramer::dsoFrameHookPolicy value); //Sets the value of the FrameHookPolicy property

    /*
    Property HostName

    Returns/sets host application name (used in embedding).

    */
    inline QString HostName() const; //Returns the value of HostName
    inline void SetHostName(const QString& value); //Sets the value of the HostName property

    /*
    Property IsDirty

    Returns True/False if file has been altered or needs save.

    */
    inline bool IsDirty() const; //Returns the value of IsDirty

    /*
    Property IsReadOnly

    Returns True/False if file was open read-only, or has not been saved.

    */
    inline bool IsReadOnly() const; //Returns the value of IsReadOnly

    /*
    Property LockServer

    Sets lock on the current embed server to keep it running (document must be open first).

    */
    inline bool LockServer() const; //Returns the value of LockServer
    inline void SetLockServer(bool value); //Sets the value of the LockServer property

    /*
    Property MenuAccelerators

    Gets/sets whether control should try to handle menu accelerators or pass to host window.

    */
    inline bool MenuAccelerators() const; //Returns the value of MenuAccelerators
    inline void SetMenuAccelerators(bool value); //Sets the value of the MenuAccelerators property

    /*
    Property Menubar

    Returns/sets whether a menu bar should be displayed.

    */
    inline bool Menubar() const; //Returns the value of Menubar
    inline void SetMenubar(bool value); //Sets the value of the Menubar property

    /*
    Property ModalState

    Returns/sets the controls modal state.

    */
    inline bool ModalState() const; //Returns the value of ModalState
    inline void SetModalState(bool value); //Sets the value of the ModalState property

    /*
    Property Titlebar

    Returns/sets whether the titlebar should be displayed.

    */
    inline bool Titlebar() const; //Returns the value of Titlebar
    inline void SetTitlebar(bool value); //Sets the value of the Titlebar property

    /*
    Property TitlebarColor

    Returns/sets the color of the titlebar.

    */
    inline QColor TitlebarColor() const; //Returns the value of TitlebarColor
    inline void SetTitlebarColor(const QColor& value); //Sets the value of the TitlebarColor property

    /*
    Property TitlebarTextColor

    Returns/sets the color of text for the titlebar.

    */
    inline QColor TitlebarTextColor() const; //Returns the value of TitlebarTextColor
    inline void SetTitlebarTextColor(const QColor& value); //Sets the value of the TitlebarTextColor property

    /*
    Property Toolbars

    Returns/sets whether toolbars should be displayed.

    */
    inline bool Toolbars() const; //Returns the value of Toolbars
    inline void SetToolbars(bool value); //Sets the value of the Toolbars property

    /*
    Method Activate

    Activates the current document object.

    */
    inline void Activate();

    /*
    Method Close

    Closes the currently open document.

    */
    inline void Close();

    /*
    Method CreateNew

    Creates a new document based on the ProgId or Template file provided.

    */
    inline void CreateNew(const QString& ProgIdOrTemplate);

    /*
    Method EnableFileCommand

    Returns/sets whether a specific action item is enabled.

    */
    inline bool EnableFileCommand(DSOFramer::dsoFileCommandType Item);

    /*
    Method ExecOleCommand

    Calls IOleCommandTarget::Exec on embedded object.

    */
    inline void ExecOleCommand(int OLECMDID);

    /*
    Method ExecOleCommand

    Calls IOleCommandTarget::Exec on embedded object.

    */
    inline void ExecOleCommand(int OLECMDID, const QVariant& Options);

    /*
    Method ExecOleCommand

    Calls IOleCommandTarget::Exec on embedded object.

    */
    inline void ExecOleCommand(int OLECMDID, const QVariant& Options, QVariant& vInParam);

    /*
    Method ExecOleCommand

    Calls IOleCommandTarget::Exec on embedded object.

    */
    inline void ExecOleCommand(int OLECMDID, const QVariant& Options, QVariant& vInParam, QVariant& vInOutParam);

    /*
    Method GetDataObjectContent

    Gets the content of the body of the document (excluding headers/footers).

    */
    inline QVariant GetDataObjectContent(const QVariant& ClipFormatNameOrNumber);

    /*
    Method Open

    Opens a document from a file, URL, or Automation object.

    */
    inline void Open(const QVariant& Document);

    /*
    Method Open

    Opens a document from a file, URL, or Automation object.

    */
    inline void Open(const QVariant& Document, const QVariant& ReadOnly);

    /*
    Method Open

    Opens a document from a file, URL, or Automation object.

    */
    inline void Open(const QVariant& Document, const QVariant& ReadOnly, const QVariant& ProgId);

    /*
    Method Open

    Opens a document from a file, URL, or Automation object.

    */
    inline void Open(const QVariant& Document, const QVariant& ReadOnly, const QVariant& ProgId, const QVariant& WebUsername);

    /*
    Method Open

    Opens a document from a file, URL, or Automation object.

    */
    inline void Open(const QVariant& Document, const QVariant& ReadOnly, const QVariant& ProgId, const QVariant& WebUsername, const QVariant& WebPassword);

    /*
    Method PrintOut

    Prints current document to specific printer with settings.

    */
    inline void PrintOut();

    /*
    Method PrintOut

    Prints current document to specific printer with settings.

    */
    inline void PrintOut(const QVariant& PromptUser);

    /*
    Method PrintOut

    Prints current document to specific printer with settings.

    */
    inline void PrintOut(const QVariant& PromptUser, const QVariant& PrinterName);

    /*
    Method PrintOut

    Prints current document to specific printer with settings.

    */
    inline void PrintOut(const QVariant& PromptUser, const QVariant& PrinterName, const QVariant& Copies);

    /*
    Method PrintOut

    Prints current document to specific printer with settings.

    */
    inline void PrintOut(const QVariant& PromptUser, const QVariant& PrinterName, const QVariant& Copies, const QVariant& FromPage);

    /*
    Method PrintOut

    Prints current document to specific printer with settings.

    */
    inline void PrintOut(const QVariant& PromptUser, const QVariant& PrinterName, const QVariant& Copies, const QVariant& FromPage, const QVariant& ToPage);

    /*
    Method PrintOut

    Prints current document to specific printer with settings.

    */
    inline void PrintOut(const QVariant& PromptUser, const QVariant& PrinterName, const QVariant& Copies, const QVariant& FromPage, const QVariant& ToPage, const QVariant& OutputFile);

    /*
    Method PrintPreview

    Starts a print preview (if document supports it).

    */
    inline void PrintPreview();

    /*
    Method PrintPreviewExit

    Exits a current print preview.

    */
    inline void PrintPreviewExit();

    /*
    Method Save

    Saves the document to specified location or its original location.

    */
    inline void Save();

    /*
    Method Save

    Saves the document to specified location or its original location.

    */
    inline void Save(const QVariant& SaveAsDocument);

    /*
    Method Save

    Saves the document to specified location or its original location.

    */
    inline void Save(const QVariant& SaveAsDocument, const QVariant& OverwriteExisting);

    /*
    Method Save

    Saves the document to specified location or its original location.

    */
    inline void Save(const QVariant& SaveAsDocument, const QVariant& OverwriteExisting, const QVariant& WebUsername);

    /*
    Method Save

    Saves the document to specified location or its original location.

    */
    inline void Save(const QVariant& SaveAsDocument, const QVariant& OverwriteExisting, const QVariant& WebUsername, const QVariant& WebPassword);

    /*
    Method SetDataObjectContent

    Sets the content of the body of the document.

    */
    inline void SetDataObjectContent(const QVariant& ClipFormatNameOrNumber, const QVariant& DataByteArray);

    /*
    Method SetEnableFileCommand
    */
    inline void SetEnableFileCommand(DSOFramer::dsoFileCommandType Item, bool rhs);

    /*
    Method ShowDialog

    Displays a modal dialog of the given type for user action.

    */
    inline void ShowDialog(DSOFramer::dsoShowDialogType DlgType);

    /*
    Method _PrintOutOld
    */
    inline void _PrintOutOld();

    /*
    Method _PrintOutOld
    */
    inline void _PrintOutOld(const QVariant& PromptToSelectPrinter);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

// member function implementation
#ifndef QAX_DUMPCPP_DSOFRAMER_NOINLINES
inline DSOFramer::dsoActivationPolicy _FramerControl::ActivationPolicy() const
{
    QVariant qax_result = property("ActivationPolicy");
    Q_ASSERT(qax_result.isValid());
    return *(DSOFramer::dsoActivationPolicy*)qax_result.constData();
}
inline void _FramerControl::SetActivationPolicy(DSOFramer::dsoActivationPolicy value){ setProperty("ActivationPolicy", QVariant(value)); }

inline IDispatch* _FramerControl::ActiveDocument() const
{
    QVariant qax_result = property("ActiveDocument");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline QColor _FramerControl::BackColor() const
{
    QVariant qax_result = property("BackColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void _FramerControl::SetBackColor(const QColor& value){ setProperty("BackColor", QVariant(value)); }

inline QColor _FramerControl::BorderColor() const
{
    QVariant qax_result = property("BorderColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void _FramerControl::SetBorderColor(const QColor& value){ setProperty("BorderColor", QVariant(value)); }

inline DSOFramer::dsoBorderStyle _FramerControl::BorderStyle() const
{
    QVariant qax_result = property("BorderStyle");
    Q_ASSERT(qax_result.isValid());
    return *(DSOFramer::dsoBorderStyle*)qax_result.constData();
}
inline void _FramerControl::SetBorderStyle(DSOFramer::dsoBorderStyle value){ setProperty("BorderStyle", QVariant(value)); }

inline QString _FramerControl::Caption() const
{
    QVariant qax_result = property("Caption");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void _FramerControl::SetCaption(const QString& value){ setProperty("Caption", QVariant(value)); }

inline QString _FramerControl::DocumentFullName() const
{
    QVariant qax_result = property("DocumentFullName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString _FramerControl::DocumentName() const
{
    QVariant qax_result = property("DocumentName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool _FramerControl::EventsEnabled() const
{
    QVariant qax_result = property("EventsEnabled");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void _FramerControl::SetEventsEnabled(bool value){ setProperty("EventsEnabled", QVariant(value)); }

inline QColor _FramerControl::ForeColor() const
{
    QVariant qax_result = property("ForeColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void _FramerControl::SetForeColor(const QColor& value){ setProperty("ForeColor", QVariant(value)); }

inline DSOFramer::dsoFrameHookPolicy _FramerControl::FrameHookPolicy() const
{
    QVariant qax_result = property("FrameHookPolicy");
    Q_ASSERT(qax_result.isValid());
    return *(DSOFramer::dsoFrameHookPolicy*)qax_result.constData();
}
inline void _FramerControl::SetFrameHookPolicy(DSOFramer::dsoFrameHookPolicy value){ setProperty("FrameHookPolicy", QVariant(value)); }

inline QString _FramerControl::HostName() const
{
    QVariant qax_result = property("HostName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void _FramerControl::SetHostName(const QString& value){ setProperty("HostName", QVariant(value)); }

inline bool _FramerControl::IsDirty() const
{
    QVariant qax_result = property("IsDirty");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline bool _FramerControl::IsReadOnly() const
{
    QVariant qax_result = property("IsReadOnly");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline bool _FramerControl::LockServer() const
{
    QVariant qax_result = property("LockServer");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void _FramerControl::SetLockServer(bool value){ setProperty("LockServer", QVariant(value)); }

inline bool _FramerControl::MenuAccelerators() const
{
    QVariant qax_result = property("MenuAccelerators");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void _FramerControl::SetMenuAccelerators(bool value){ setProperty("MenuAccelerators", QVariant(value)); }

inline bool _FramerControl::Menubar() const
{
    QVariant qax_result = property("Menubar");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void _FramerControl::SetMenubar(bool value){ setProperty("Menubar", QVariant(value)); }

inline bool _FramerControl::ModalState() const
{
    QVariant qax_result = property("ModalState");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void _FramerControl::SetModalState(bool value){ setProperty("ModalState", QVariant(value)); }

inline bool _FramerControl::Titlebar() const
{
    QVariant qax_result = property("Titlebar");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void _FramerControl::SetTitlebar(bool value){ setProperty("Titlebar", QVariant(value)); }

inline QColor _FramerControl::TitlebarColor() const
{
    QVariant qax_result = property("TitlebarColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void _FramerControl::SetTitlebarColor(const QColor& value){ setProperty("TitlebarColor", QVariant(value)); }

inline QColor _FramerControl::TitlebarTextColor() const
{
    QVariant qax_result = property("TitlebarTextColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void _FramerControl::SetTitlebarTextColor(const QColor& value){ setProperty("TitlebarTextColor", QVariant(value)); }

inline bool _FramerControl::Toolbars() const
{
    QVariant qax_result = property("Toolbars");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void _FramerControl::SetToolbars(bool value){ setProperty("Toolbars", QVariant(value)); }

inline void _FramerControl::Activate()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}

inline void _FramerControl::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void _FramerControl::CreateNew(const QString& ProgIdOrTemplate)
{
    void *_a[] = {0, (void*)&ProgIdOrTemplate};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline bool _FramerControl::EnableFileCommand(DSOFramer::dsoFileCommandType Item)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Item};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline void _FramerControl::ExecOleCommand(int OLECMDID)
{
    void *_a[] = {0, (void*)&OLECMDID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void _FramerControl::ExecOleCommand(int OLECMDID, const QVariant& Options)
{
    void *_a[] = {0, (void*)&OLECMDID, (void*)&Options};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void _FramerControl::ExecOleCommand(int OLECMDID, const QVariant& Options, QVariant& vInParam)
{
    void *_a[] = {0, (void*)&OLECMDID, (void*)&Options, (void*)&vInParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void _FramerControl::ExecOleCommand(int OLECMDID, const QVariant& Options, QVariant& vInParam, QVariant& vInOutParam)
{
    void *_a[] = {0, (void*)&OLECMDID, (void*)&Options, (void*)&vInParam, (void*)&vInOutParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline QVariant _FramerControl::GetDataObjectContent(const QVariant& ClipFormatNameOrNumber)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&ClipFormatNameOrNumber};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline void _FramerControl::Open(const QVariant& Document)
{
    void *_a[] = {0, (void*)&Document};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline void _FramerControl::Open(const QVariant& Document, const QVariant& ReadOnly)
{
    void *_a[] = {0, (void*)&Document, (void*)&ReadOnly};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline void _FramerControl::Open(const QVariant& Document, const QVariant& ReadOnly, const QVariant& ProgId)
{
    void *_a[] = {0, (void*)&Document, (void*)&ReadOnly, (void*)&ProgId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline void _FramerControl::Open(const QVariant& Document, const QVariant& ReadOnly, const QVariant& ProgId, const QVariant& WebUsername)
{
    void *_a[] = {0, (void*)&Document, (void*)&ReadOnly, (void*)&ProgId, (void*)&WebUsername};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline void _FramerControl::Open(const QVariant& Document, const QVariant& ReadOnly, const QVariant& ProgId, const QVariant& WebUsername, const QVariant& WebPassword)
{
    void *_a[] = {0, (void*)&Document, (void*)&ReadOnly, (void*)&ProgId, (void*)&WebUsername, (void*)&WebPassword};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}

inline void _FramerControl::PrintOut()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}

inline void _FramerControl::PrintOut(const QVariant& PromptUser)
{
    void *_a[] = {0, (void*)&PromptUser};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline void _FramerControl::PrintOut(const QVariant& PromptUser, const QVariant& PrinterName)
{
    void *_a[] = {0, (void*)&PromptUser, (void*)&PrinterName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
}

inline void _FramerControl::PrintOut(const QVariant& PromptUser, const QVariant& PrinterName, const QVariant& Copies)
{
    void *_a[] = {0, (void*)&PromptUser, (void*)&PrinterName, (void*)&Copies};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
}

inline void _FramerControl::PrintOut(const QVariant& PromptUser, const QVariant& PrinterName, const QVariant& Copies, const QVariant& FromPage)
{
    void *_a[] = {0, (void*)&PromptUser, (void*)&PrinterName, (void*)&Copies, (void*)&FromPage};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
}

inline void _FramerControl::PrintOut(const QVariant& PromptUser, const QVariant& PrinterName, const QVariant& Copies, const QVariant& FromPage, const QVariant& ToPage)
{
    void *_a[] = {0, (void*)&PromptUser, (void*)&PrinterName, (void*)&Copies, (void*)&FromPage, (void*)&ToPage};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
}

inline void _FramerControl::PrintOut(const QVariant& PromptUser, const QVariant& PrinterName, const QVariant& Copies, const QVariant& FromPage, const QVariant& ToPage, const QVariant& OutputFile)
{
    void *_a[] = {0, (void*)&PromptUser, (void*)&PrinterName, (void*)&Copies, (void*)&FromPage, (void*)&ToPage, (void*)&OutputFile};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
}

inline void _FramerControl::PrintPreview()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
}

inline void _FramerControl::PrintPreviewExit()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
}

inline void _FramerControl::Save()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline void _FramerControl::Save(const QVariant& SaveAsDocument)
{
    void *_a[] = {0, (void*)&SaveAsDocument};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
}

inline void _FramerControl::Save(const QVariant& SaveAsDocument, const QVariant& OverwriteExisting)
{
    void *_a[] = {0, (void*)&SaveAsDocument, (void*)&OverwriteExisting};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
}

inline void _FramerControl::Save(const QVariant& SaveAsDocument, const QVariant& OverwriteExisting, const QVariant& WebUsername)
{
    void *_a[] = {0, (void*)&SaveAsDocument, (void*)&OverwriteExisting, (void*)&WebUsername};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
}

inline void _FramerControl::Save(const QVariant& SaveAsDocument, const QVariant& OverwriteExisting, const QVariant& WebUsername, const QVariant& WebPassword)
{
    void *_a[] = {0, (void*)&SaveAsDocument, (void*)&OverwriteExisting, (void*)&WebUsername, (void*)&WebPassword};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
}

inline void _FramerControl::SetDataObjectContent(const QVariant& ClipFormatNameOrNumber, const QVariant& DataByteArray)
{
    void *_a[] = {0, (void*)&ClipFormatNameOrNumber, (void*)&DataByteArray};
    qt_metacall(QMetaObject::InvokeMetaMethod, 40, _a);
}

inline void _FramerControl::SetEnableFileCommand(DSOFramer::dsoFileCommandType Item, bool rhs)
{
    void *_a[] = {0, (void*)&Item, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 41, _a);
}

inline void _FramerControl::ShowDialog(DSOFramer::dsoShowDialogType DlgType)
{
    void *_a[] = {0, (void*)&DlgType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 54, _a);
}

inline void _FramerControl::_PrintOutOld()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 55, _a);
}

inline void _FramerControl::_PrintOutOld(const QVariant& PromptToSelectPrinter)
{
    void *_a[] = {0, (void*)&PromptToSelectPrinter};
    qt_metacall(QMetaObject::InvokeMetaMethod, 56, _a);
}


inline DSOFramer::dsoActivationPolicy FramerControl::ActivationPolicy() const
{
    QVariant qax_result = property("ActivationPolicy");
    Q_ASSERT(qax_result.isValid());
    return *(DSOFramer::dsoActivationPolicy*)qax_result.constData();
}
inline void FramerControl::SetActivationPolicy(DSOFramer::dsoActivationPolicy value){ setProperty("ActivationPolicy", QVariant(value)); }

inline IDispatch* FramerControl::ActiveDocument() const
{
    QVariant qax_result = property("ActiveDocument");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline QColor FramerControl::BackColor() const
{
    QVariant qax_result = property("BackColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void FramerControl::SetBackColor(const QColor& value){ setProperty("BackColor", QVariant(value)); }

inline QColor FramerControl::BorderColor() const
{
    QVariant qax_result = property("BorderColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void FramerControl::SetBorderColor(const QColor& value){ setProperty("BorderColor", QVariant(value)); }

inline DSOFramer::dsoBorderStyle FramerControl::BorderStyle() const
{
    QVariant qax_result = property("BorderStyle");
    Q_ASSERT(qax_result.isValid());
    return *(DSOFramer::dsoBorderStyle*)qax_result.constData();
}
inline void FramerControl::SetBorderStyle(DSOFramer::dsoBorderStyle value){ setProperty("BorderStyle", QVariant(value)); }

inline QString FramerControl::Caption() const
{
    QVariant qax_result = property("Caption");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void FramerControl::SetCaption(const QString& value){ setProperty("Caption", QVariant(value)); }

inline QString FramerControl::DocumentFullName() const
{
    QVariant qax_result = property("DocumentFullName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString FramerControl::DocumentName() const
{
    QVariant qax_result = property("DocumentName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool FramerControl::EventsEnabled() const
{
    QVariant qax_result = property("EventsEnabled");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void FramerControl::SetEventsEnabled(bool value){ setProperty("EventsEnabled", QVariant(value)); }

inline QColor FramerControl::ForeColor() const
{
    QVariant qax_result = property("ForeColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void FramerControl::SetForeColor(const QColor& value){ setProperty("ForeColor", QVariant(value)); }

inline DSOFramer::dsoFrameHookPolicy FramerControl::FrameHookPolicy() const
{
    QVariant qax_result = property("FrameHookPolicy");
    Q_ASSERT(qax_result.isValid());
    return *(DSOFramer::dsoFrameHookPolicy*)qax_result.constData();
}
inline void FramerControl::SetFrameHookPolicy(DSOFramer::dsoFrameHookPolicy value){ setProperty("FrameHookPolicy", QVariant(value)); }

inline QString FramerControl::HostName() const
{
    QVariant qax_result = property("HostName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void FramerControl::SetHostName(const QString& value){ setProperty("HostName", QVariant(value)); }

inline bool FramerControl::IsDirty() const
{
    QVariant qax_result = property("IsDirty");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline bool FramerControl::IsReadOnly() const
{
    QVariant qax_result = property("IsReadOnly");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline bool FramerControl::LockServer() const
{
    QVariant qax_result = property("LockServer");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void FramerControl::SetLockServer(bool value){ setProperty("LockServer", QVariant(value)); }

inline bool FramerControl::MenuAccelerators() const
{
    QVariant qax_result = property("MenuAccelerators");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void FramerControl::SetMenuAccelerators(bool value){ setProperty("MenuAccelerators", QVariant(value)); }

inline bool FramerControl::Menubar() const
{
    QVariant qax_result = property("Menubar");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void FramerControl::SetMenubar(bool value){ setProperty("Menubar", QVariant(value)); }

inline bool FramerControl::ModalState() const
{
    QVariant qax_result = property("ModalState");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void FramerControl::SetModalState(bool value){ setProperty("ModalState", QVariant(value)); }

inline bool FramerControl::Titlebar() const
{
    QVariant qax_result = property("Titlebar");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void FramerControl::SetTitlebar(bool value){ setProperty("Titlebar", QVariant(value)); }

inline QColor FramerControl::TitlebarColor() const
{
    QVariant qax_result = property("TitlebarColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void FramerControl::SetTitlebarColor(const QColor& value){ setProperty("TitlebarColor", QVariant(value)); }

inline QColor FramerControl::TitlebarTextColor() const
{
    QVariant qax_result = property("TitlebarTextColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void FramerControl::SetTitlebarTextColor(const QColor& value){ setProperty("TitlebarTextColor", QVariant(value)); }

inline bool FramerControl::Toolbars() const
{
    QVariant qax_result = property("Toolbars");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void FramerControl::SetToolbars(bool value){ setProperty("Toolbars", QVariant(value)); }

inline void FramerControl::Activate()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
}

inline void FramerControl::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
}

inline void FramerControl::CreateNew(const QString& ProgIdOrTemplate)
{
    void *_a[] = {0, (void*)&ProgIdOrTemplate};
    qt_metacall(QMetaObject::InvokeMetaMethod, 40, _a);
}

inline bool FramerControl::EnableFileCommand(DSOFramer::dsoFileCommandType Item)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Item};
    qt_metacall(QMetaObject::InvokeMetaMethod, 41, _a);
    return qax_result;
}

inline void FramerControl::ExecOleCommand(int OLECMDID)
{
    void *_a[] = {0, (void*)&OLECMDID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
}

inline void FramerControl::ExecOleCommand(int OLECMDID, const QVariant& Options)
{
    void *_a[] = {0, (void*)&OLECMDID, (void*)&Options};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
}

inline void FramerControl::ExecOleCommand(int OLECMDID, const QVariant& Options, QVariant& vInParam)
{
    void *_a[] = {0, (void*)&OLECMDID, (void*)&Options, (void*)&vInParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
}

inline void FramerControl::ExecOleCommand(int OLECMDID, const QVariant& Options, QVariant& vInParam, QVariant& vInOutParam)
{
    void *_a[] = {0, (void*)&OLECMDID, (void*)&Options, (void*)&vInParam, (void*)&vInOutParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
}

inline QVariant FramerControl::GetDataObjectContent(const QVariant& ClipFormatNameOrNumber)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&ClipFormatNameOrNumber};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
    return qax_result;
}

inline void FramerControl::Open(const QVariant& Document)
{
    void *_a[] = {0, (void*)&Document};
    qt_metacall(QMetaObject::InvokeMetaMethod, 47, _a);
}

inline void FramerControl::Open(const QVariant& Document, const QVariant& ReadOnly)
{
    void *_a[] = {0, (void*)&Document, (void*)&ReadOnly};
    qt_metacall(QMetaObject::InvokeMetaMethod, 48, _a);
}

inline void FramerControl::Open(const QVariant& Document, const QVariant& ReadOnly, const QVariant& ProgId)
{
    void *_a[] = {0, (void*)&Document, (void*)&ReadOnly, (void*)&ProgId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 49, _a);
}

inline void FramerControl::Open(const QVariant& Document, const QVariant& ReadOnly, const QVariant& ProgId, const QVariant& WebUsername)
{
    void *_a[] = {0, (void*)&Document, (void*)&ReadOnly, (void*)&ProgId, (void*)&WebUsername};
    qt_metacall(QMetaObject::InvokeMetaMethod, 50, _a);
}

inline void FramerControl::Open(const QVariant& Document, const QVariant& ReadOnly, const QVariant& ProgId, const QVariant& WebUsername, const QVariant& WebPassword)
{
    void *_a[] = {0, (void*)&Document, (void*)&ReadOnly, (void*)&ProgId, (void*)&WebUsername, (void*)&WebPassword};
    qt_metacall(QMetaObject::InvokeMetaMethod, 51, _a);
}

inline void FramerControl::PrintOut()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 52, _a);
}

inline void FramerControl::PrintOut(const QVariant& PromptUser)
{
    void *_a[] = {0, (void*)&PromptUser};
    qt_metacall(QMetaObject::InvokeMetaMethod, 53, _a);
}

inline void FramerControl::PrintOut(const QVariant& PromptUser, const QVariant& PrinterName)
{
    void *_a[] = {0, (void*)&PromptUser, (void*)&PrinterName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 54, _a);
}

inline void FramerControl::PrintOut(const QVariant& PromptUser, const QVariant& PrinterName, const QVariant& Copies)
{
    void *_a[] = {0, (void*)&PromptUser, (void*)&PrinterName, (void*)&Copies};
    qt_metacall(QMetaObject::InvokeMetaMethod, 55, _a);
}

inline void FramerControl::PrintOut(const QVariant& PromptUser, const QVariant& PrinterName, const QVariant& Copies, const QVariant& FromPage)
{
    void *_a[] = {0, (void*)&PromptUser, (void*)&PrinterName, (void*)&Copies, (void*)&FromPage};
    qt_metacall(QMetaObject::InvokeMetaMethod, 56, _a);
}

inline void FramerControl::PrintOut(const QVariant& PromptUser, const QVariant& PrinterName, const QVariant& Copies, const QVariant& FromPage, const QVariant& ToPage)
{
    void *_a[] = {0, (void*)&PromptUser, (void*)&PrinterName, (void*)&Copies, (void*)&FromPage, (void*)&ToPage};
    qt_metacall(QMetaObject::InvokeMetaMethod, 57, _a);
}

inline void FramerControl::PrintOut(const QVariant& PromptUser, const QVariant& PrinterName, const QVariant& Copies, const QVariant& FromPage, const QVariant& ToPage, const QVariant& OutputFile)
{
    void *_a[] = {0, (void*)&PromptUser, (void*)&PrinterName, (void*)&Copies, (void*)&FromPage, (void*)&ToPage, (void*)&OutputFile};
    qt_metacall(QMetaObject::InvokeMetaMethod, 58, _a);
}

inline void FramerControl::PrintPreview()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 59, _a);
}

inline void FramerControl::PrintPreviewExit()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 60, _a);
}

inline void FramerControl::Save()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 61, _a);
}

inline void FramerControl::Save(const QVariant& SaveAsDocument)
{
    void *_a[] = {0, (void*)&SaveAsDocument};
    qt_metacall(QMetaObject::InvokeMetaMethod, 62, _a);
}

inline void FramerControl::Save(const QVariant& SaveAsDocument, const QVariant& OverwriteExisting)
{
    void *_a[] = {0, (void*)&SaveAsDocument, (void*)&OverwriteExisting};
    qt_metacall(QMetaObject::InvokeMetaMethod, 63, _a);
}

inline void FramerControl::Save(const QVariant& SaveAsDocument, const QVariant& OverwriteExisting, const QVariant& WebUsername)
{
    void *_a[] = {0, (void*)&SaveAsDocument, (void*)&OverwriteExisting, (void*)&WebUsername};
    qt_metacall(QMetaObject::InvokeMetaMethod, 64, _a);
}

inline void FramerControl::Save(const QVariant& SaveAsDocument, const QVariant& OverwriteExisting, const QVariant& WebUsername, const QVariant& WebPassword)
{
    void *_a[] = {0, (void*)&SaveAsDocument, (void*)&OverwriteExisting, (void*)&WebUsername, (void*)&WebPassword};
    qt_metacall(QMetaObject::InvokeMetaMethod, 65, _a);
}

inline void FramerControl::SetDataObjectContent(const QVariant& ClipFormatNameOrNumber, const QVariant& DataByteArray)
{
    void *_a[] = {0, (void*)&ClipFormatNameOrNumber, (void*)&DataByteArray};
    qt_metacall(QMetaObject::InvokeMetaMethod, 71, _a);
}

inline void FramerControl::SetEnableFileCommand(DSOFramer::dsoFileCommandType Item, bool rhs)
{
    void *_a[] = {0, (void*)&Item, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 72, _a);
}

inline void FramerControl::ShowDialog(DSOFramer::dsoShowDialogType DlgType)
{
    void *_a[] = {0, (void*)&DlgType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 85, _a);
}

inline void FramerControl::_PrintOutOld()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 86, _a);
}

inline void FramerControl::_PrintOutOld(const QVariant& PromptToSelectPrinter)
{
    void *_a[] = {0, (void*)&PromptToSelectPrinter};
    qt_metacall(QMetaObject::InvokeMetaMethod, 87, _a);
}



#endif

}

template<>
inline void *qMetaTypeConstructHelper(const DSOFramer::_FramerControl *t)
{ Q_ASSERT(!t); return new DSOFramer::_FramerControl; }

template<>
inline void *qMetaTypeConstructHelper(const DSOFramer::FramerControl *t)
{ Q_ASSERT(!t); return new DSOFramer::FramerControl; }

#endif

